
modem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00001b86  00001c1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000186  0080018c  0080018c  00001ca6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ca6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000550  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c6b3  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028e8  00000000  00000000  0000e91b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003496  00000000  00000000  00011203  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fb8  00000000  00000000  0001469c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c30  00000000  00000000  00015654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004fb7  00000000  00000000  00018284  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  0001d23b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__vector_1>
       8:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__vector_2>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__vector_6>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__vector_9>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__vector_13>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__vector_16>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 b2 04 	jmp	0x964	; 0x964 <__vector_18>
      4c:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__vector_19>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	14 05       	cpc	r17, r4
      ba:	e0 0a       	sbc	r14, r16

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	e6 e8       	ldi	r30, 0x86	; 134
      d0:	fb e1       	ldi	r31, 0x1B	; 27
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	ac 38       	cpi	r26, 0x8C	; 140
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	23 e0       	ldi	r18, 0x03	; 3
      e0:	ac e8       	ldi	r26, 0x8C	; 140
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a2 31       	cpi	r26, 0x12	; 18
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
      ee:	10 e0       	ldi	r17, 0x00	; 0
      f0:	ce e5       	ldi	r28, 0x5E	; 94
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
      f6:	21 97       	sbiw	r28, 0x01	; 1
      f8:	fe 01       	movw	r30, r28
      fa:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__tablejump2__>
      fe:	cc 35       	cpi	r28, 0x5C	; 92
     100:	d1 07       	cpc	r29, r17
     102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
     104:	0e 94 42 05 	call	0xa84	; 0xa84 <main>
     108:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <_Z16rfPacketReceivedP8CCPACKET>:
 */
void rfPacketReceived(CCPACKET *packet)
{
  //if (packet->length > /*5*/0)
  {
    rxPacket = packet;
     110:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <rxPacket+0x1>
     114:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <rxPacket>
    packetAvailable = true;
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <packetAvailable>
     11e:	08 95       	ret

00000120 <_Z10isrT1eventv>:
 * Timer1 interrupt routine
 */
void isrT1event(void)
{

  if (t1Ticks == MAX_SERIAL_SILENCE_TK)
     120:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
     124:	82 30       	cpi	r24, 0x02	; 2
     126:	39 f5       	brne	.+78     	; 0x176 <_Z10isrT1eventv+0x56>
  {
    // Detach Timer1 interrupt
    STOP_TIMER();
     128:	88 e0       	ldi	r24, 0x08	; 8
     12a:	93 e0       	ldi	r25, 0x03	; 3
     12c:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN8TimerOne15detachInterruptEv>
    RESET_TIMER();
     130:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <__data_end>
    // Pending "+++" command?
    if (!strcmp(strSerial, AT_GOTO_CMDMODE))
     134:	64 e0       	ldi	r22, 0x04	; 4
     136:	71 e0       	ldi	r23, 0x01	; 1
     138:	82 e9       	ldi	r24, 0x92	; 146
     13a:	91 e0       	ldi	r25, 0x01	; 1
     13c:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <strcmp>
     140:	89 2b       	or	r24, r25
     142:	69 f4       	brne	.+26     	; 0x15e <_Z10isrT1eventv+0x3e>
    {
      panstamp.rxOff();  // Disable wireless reception
     144:	8b ef       	ldi	r24, 0xFB	; 251
     146:	92 e0       	ldi	r25, 0x02	; 2
     148:	0e 94 9e 0a 	call	0x153c	; 0x153c <_ZN8PANSTAMP5rxOffEv>
      Serial.println("OK-Command mode");
     14c:	68 e0       	ldi	r22, 0x08	; 8
     14e:	71 e0       	ldi	r23, 0x01	; 1
     150:	84 e1       	ldi	r24, 0x14	; 20
     152:	92 e0       	ldi	r25, 0x02	; 2
     154:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN5Print7printlnEPKc>
      serMode = SERMODE_COMMAND;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <serMode>
    }
    memset(strSerial, 0, sizeof(strSerial));
     15e:	80 e8       	ldi	r24, 0x80	; 128
     160:	e2 e9       	ldi	r30, 0x92	; 146
     162:	f1 e0       	ldi	r31, 0x01	; 1
     164:	df 01       	movw	r26, r30
     166:	1d 92       	st	X+, r1
     168:	8a 95       	dec	r24
     16a:	e9 f7       	brne	.-6      	; 0x166 <_Z10isrT1eventv+0x46>
    len = 0;
     16c:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <len+0x1>
     170:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <len>
     174:	08 95       	ret
  }
  else
    t1Ticks++;
     176:	8f 5f       	subi	r24, 0xFF	; 255
     178:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
     17c:	08 95       	ret

0000017e <_Z9charToHexh>:
 */
byte charToHex(byte ch)
{
  byte val;
  
  if (ch >= 'A' && ch <= 'F')
     17e:	9f eb       	ldi	r25, 0xBF	; 191
     180:	98 0f       	add	r25, r24
     182:	96 30       	cpi	r25, 0x06	; 6
     184:	10 f4       	brcc	.+4      	; 0x18a <_Z9charToHexh+0xc>
    val = ch - 55;
     186:	87 53       	subi	r24, 0x37	; 55
     188:	08 95       	ret
  else if (ch >= 'a' && ch <= 'f')
     18a:	9f e9       	ldi	r25, 0x9F	; 159
     18c:	98 0f       	add	r25, r24
     18e:	96 30       	cpi	r25, 0x06	; 6
     190:	10 f4       	brcc	.+4      	; 0x196 <_Z9charToHexh+0x18>
    val = ch - 87;
     192:	87 55       	subi	r24, 0x57	; 87
     194:	08 95       	ret
  else if (ch >= '0' && ch <= '9')
     196:	80 53       	subi	r24, 0x30	; 48
     198:	8a 30       	cpi	r24, 0x0A	; 10
     19a:	08 f0       	brcs	.+2      	; 0x19e <_Z9charToHexh+0x20>
    val = ch - 48;
  else
    val = 0x00;
     19c:	80 e0       	ldi	r24, 0x00	; 0

  return val;
}
     19e:	08 95       	ret

000001a0 <_Z15handleSerialCmdPc>:
 * Handle serial command received
 *
 * 'command'  AT command received
 */
void handleSerialCmd(char* command)
{
     1a0:	8f 92       	push	r8
     1a2:	9f 92       	push	r9
     1a4:	af 92       	push	r10
     1a6:	bf 92       	push	r11
     1a8:	cf 92       	push	r12
     1aa:	df 92       	push	r13
     1ac:	ef 92       	push	r14
     1ae:	ff 92       	push	r15
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	c1 54       	subi	r28, 0x41	; 65
     1be:	d1 09       	sbc	r29, r1
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	f8 94       	cli
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	cd bf       	out	0x3d, r28	; 61
     1ca:	fc 01       	movw	r30, r24
  byte arrV[2];
  CCPACKET packet;
  ATQUERY atQuery = ATQUERY_REQUEST;  
 
  // Data mode?
  if (serMode == SERMODE_DATA)
     1cc:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <serMode>
  {
    packet.length = strlen(command)/2;
     1d0:	df 01       	movw	r26, r30
     1d2:	0d 90       	ld	r0, X+
     1d4:	00 20       	and	r0, r0
     1d6:	e9 f7       	brne	.-6      	; 0x1d2 <_Z15handleSerialCmdPc+0x32>
     1d8:	11 97       	sbiw	r26, 0x01	; 1
  byte arrV[2];
  CCPACKET packet;
  ATQUERY atQuery = ATQUERY_REQUEST;  
 
  // Data mode?
  if (serMode == SERMODE_DATA)
     1da:	81 11       	cpse	r24, r1
     1dc:	43 c0       	rjmp	.+134    	; 0x264 <_Z15handleSerialCmdPc+0xc4>
  {
    packet.length = strlen(command)/2;
     1de:	7d 01       	movw	r14, r26
     1e0:	ee 1a       	sub	r14, r30
     1e2:	ff 0a       	sbc	r15, r31
     1e4:	f6 94       	lsr	r15
     1e6:	e7 94       	ror	r14
     1e8:	ce 2c       	mov	r12, r14
    
    if (packet.length > 0)
     1ea:	ee 20       	and	r14, r14
     1ec:	09 f4       	brne	.+2      	; 0x1f0 <_Z15handleSerialCmdPc+0x50>
     1ee:	45 c1       	rjmp	.+650    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     1f0:	8f 01       	movw	r16, r30
     1f2:	ce 01       	movw	r24, r28
     1f4:	01 96       	adiw	r24, 0x01	; 1
     1f6:	4c 01       	movw	r8, r24
     1f8:	5c 01       	movw	r10, r24
    {
      // Convert ASCII string into array of bytes
      for(i=0 ; i<packet.length ; i++)
      {     
        packet.data[i] = charToHex(command[i*2]) << 4;
     1fa:	f8 01       	movw	r30, r16
     1fc:	80 81       	ld	r24, Z
     1fe:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9charToHexh>
     202:	d8 2e       	mov	r13, r24
        packet.data[i] |= charToHex(command[i*2 + 1]);
     204:	f8 01       	movw	r30, r16
     206:	81 81       	ldd	r24, Z+1	; 0x01
     208:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9charToHexh>
     20c:	d2 94       	swap	r13
     20e:	90 ef       	ldi	r25, 0xF0	; 240
     210:	d9 22       	and	r13, r25
     212:	8d 29       	or	r24, r13
     214:	f5 01       	movw	r30, r10
     216:	81 83       	std	Z+1, r24	; 0x01
     218:	0e 5f       	subi	r16, 0xFE	; 254
     21a:	1f 4f       	sbci	r17, 0xFF	; 255
     21c:	ff ef       	ldi	r31, 0xFF	; 255
     21e:	af 1a       	sub	r10, r31
     220:	bf 0a       	sbc	r11, r31
    packet.length = strlen(command)/2;
    
    if (packet.length > 0)
    {
      // Convert ASCII string into array of bytes
      for(i=0 ; i<packet.length ; i++)
     222:	8a 2d       	mov	r24, r10
     224:	88 19       	sub	r24, r8
     226:	8c 15       	cp	r24, r12
     228:	40 f3       	brcs	.-48     	; 0x1fa <_Z15handleSerialCmdPc+0x5a>
      {     
        packet.data[i] = charToHex(command[i*2]) << 4;
        packet.data[i] |= charToHex(command[i*2 + 1]);
      }
      // Send packet via RF
      panstamp.radio.sendData(packet);
     22a:	e9 82       	std	Y+1, r14	; 0x01
     22c:	8d b7       	in	r24, 0x3d	; 61
     22e:	9e b7       	in	r25, 0x3e	; 62
     230:	81 54       	subi	r24, 0x41	; 65
     232:	91 09       	sbc	r25, r1
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	9e bf       	out	0x3e, r25	; 62
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	8d bf       	out	0x3d, r24	; 61
     23e:	ad b7       	in	r26, 0x3d	; 61
     240:	be b7       	in	r27, 0x3e	; 62
     242:	11 96       	adiw	r26, 0x01	; 1
     244:	81 e4       	ldi	r24, 0x41	; 65
     246:	f4 01       	movw	r30, r8
     248:	01 90       	ld	r0, Z+
     24a:	0d 92       	st	X+, r0
     24c:	8a 95       	dec	r24
     24e:	e1 f7       	brne	.-8      	; 0x248 <_Z15handleSerialCmdPc+0xa8>
     250:	8c ef       	ldi	r24, 0xFC	; 252
     252:	92 e0       	ldi	r25, 0x02	; 2
     254:	0e 94 5f 08 	call	0x10be	; 0x10be <_ZN6CC11018sendDataE8CCPACKET>
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
     262:	0b c1       	rjmp	.+534    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
    }
  }
  // Command mode?
  else  // serMode = SERMODE_COMMAND
  {
    len = strlen(command);
     264:	fa 2e       	mov	r15, r26
     266:	fe 1a       	sub	r15, r30
    
    if (len < 5)
     268:	f4 e0       	ldi	r31, 0x04	; 4
     26a:	ff 15       	cp	r31, r15
     26c:	90 f1       	brcs	.+100    	; 0x2d2 <_Z15handleSerialCmdPc+0x132>
    {
      // Basic attention command
      if (!strcmp(strSerial, AT_ATTENTION))
     26e:	68 e1       	ldi	r22, 0x18	; 24
     270:	71 e0       	ldi	r23, 0x01	; 1
     272:	82 e9       	ldi	r24, 0x92	; 146
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <strcmp>
     27a:	89 2b       	or	r24, r25
     27c:	09 f4       	brne	.+2      	; 0x280 <_Z15handleSerialCmdPc+0xe0>
     27e:	f7 c0       	rjmp	.+494    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
        Serial.println("OK");
      // Reset modem
      else if (!strcmp(strSerial, AT_RESET))
     280:	6e e1       	ldi	r22, 0x1E	; 30
     282:	71 e0       	ldi	r23, 0x01	; 1
     284:	82 e9       	ldi	r24, 0x92	; 146
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <strcmp>
     28c:	89 2b       	or	r24, r25
     28e:	59 f4       	brne	.+22     	; 0x2a6 <_Z15handleSerialCmdPc+0x106>
      {
        Serial.println("OK");
     290:	6b e1       	ldi	r22, 0x1B	; 27
     292:	71 e0       	ldi	r23, 0x01	; 1
     294:	84 e1       	ldi	r24, 0x14	; 20
     296:	92 e0       	ldi	r25, 0x02	; 2
     298:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN5Print7printlnEPKc>
        panstamp.reset();
     29c:	8b ef       	ldi	r24, 0xFB	; 251
     29e:	92 e0       	ldi	r25, 0x02	; 2
     2a0:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN8PANSTAMP5resetEv>
     2a4:	ea c0       	rjmp	.+468    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
      }
      // Go to serial data mode
      else if (!strcmp(strSerial, AT_GOTO_DATAMODE))
     2a6:	62 e2       	ldi	r22, 0x22	; 34
     2a8:	71 e0       	ldi	r23, 0x01	; 1
     2aa:	82 e9       	ldi	r24, 0x92	; 146
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <strcmp>
     2b2:	89 2b       	or	r24, r25
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <_Z15handleSerialCmdPc+0x118>
     2b6:	e1 c0       	rjmp	.+450    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
      {
        serMode = SERMODE_DATA;
     2b8:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <serMode>
        Serial.println("OK-Data mode");
     2bc:	66 e2       	ldi	r22, 0x26	; 38
     2be:	71 e0       	ldi	r23, 0x01	; 1
     2c0:	84 e1       	ldi	r24, 0x14	; 20
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN5Print7printlnEPKc>
        panstamp.rxOn();  // Enable wireless reception
     2c8:	8b ef       	ldi	r24, 0xFB	; 251
     2ca:	92 e0       	ldi	r25, 0x02	; 2
     2cc:	0e 94 97 0a 	call	0x152e	; 0x152e <_ZN8PANSTAMP4rxOnEv>
     2d0:	d4 c0       	rjmp	.+424    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
      }
    }
    // Set new value
    else 
    {
      if ((strSerial[4] == '=') && (len >= 6))
     2d2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <strSerial+0x4>
     2d6:	8d 33       	cpi	r24, 0x3D	; 61
     2d8:	a9 f4       	brne	.+42     	; 0x304 <_Z15handleSerialCmdPc+0x164>
     2da:	85 e0       	ldi	r24, 0x05	; 5
     2dc:	f8 16       	cp	r15, r24
     2de:	91 f0       	breq	.+36     	; 0x304 <_Z15handleSerialCmdPc+0x164>
      {
        // Get new value
        i = (charToHex(strSerial[5]) << 4) & 0xF0;
     2e0:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <strSerial+0x5>
     2e4:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9charToHexh>
     2e8:	08 2f       	mov	r16, r24
        i |= charToHex(strSerial[6]) & 0x0F;
     2ea:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <strSerial+0x6>
     2ee:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9charToHexh>
     2f2:	8f 70       	andi	r24, 0x0F	; 15
     2f4:	90 e1       	ldi	r25, 0x10	; 16
     2f6:	09 9f       	mul	r16, r25
     2f8:	90 01       	movw	r18, r0
     2fa:	11 24       	eor	r1, r1
     2fc:	18 2f       	mov	r17, r24
     2fe:	12 2b       	or	r17, r18
        atQuery = ATQUERY_COMMAND;
     300:	00 e0       	ldi	r16, 0x00	; 0
     302:	01 c0       	rjmp	.+2      	; 0x306 <_Z15handleSerialCmdPc+0x166>
void handleSerialCmd(char* command)
{
  byte i, len;
  byte arrV[2];
  CCPACKET packet;
  ATQUERY atQuery = ATQUERY_REQUEST;  
     304:	01 e0       	ldi	r16, 0x01	; 1
        i = (charToHex(strSerial[5]) << 4) & 0xF0;
        i |= charToHex(strSerial[6]) & 0x0F;
        atQuery = ATQUERY_COMMAND;
      }
      // Hardware version
      if (!strncmp(strSerial, AT_HVERSION, 4))
     306:	44 e0       	ldi	r20, 0x04	; 4
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	63 e3       	ldi	r22, 0x33	; 51
     30c:	71 e0       	ldi	r23, 0x01	; 1
     30e:	82 e9       	ldi	r24, 0x92	; 146
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <strncmp>
     316:	89 2b       	or	r24, r25
     318:	41 f4       	brne	.+16     	; 0x32a <_Z15handleSerialCmdPc+0x18a>
      {
        if (atQuery == ATQUERY_REQUEST)
     31a:	01 30       	cpi	r16, 0x01	; 1
     31c:	09 f0       	breq	.+2      	; 0x320 <_Z15handleSerialCmdPc+0x180>
     31e:	ad c0       	rjmp	.+346    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
          Serial.println(HARDWARE_VERSION, HEX);
     320:	40 e1       	ldi	r20, 0x10	; 16
     322:	50 e0       	ldi	r21, 0x00	; 0
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	71 e0       	ldi	r23, 0x01	; 1
     328:	11 c0       	rjmp	.+34     	; 0x34c <_Z15handleSerialCmdPc+0x1ac>
      }
      // Firmware version
      else if (!strncmp(strSerial, AT_FVERSION, 4))
     32a:	44 e0       	ldi	r20, 0x04	; 4
     32c:	50 e0       	ldi	r21, 0x00	; 0
     32e:	68 e3       	ldi	r22, 0x38	; 56
     330:	71 e0       	ldi	r23, 0x01	; 1
     332:	82 e9       	ldi	r24, 0x92	; 146
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <strncmp>
     33a:	89 2b       	or	r24, r25
     33c:	61 f4       	brne	.+24     	; 0x356 <_Z15handleSerialCmdPc+0x1b6>
      {
        if (atQuery == ATQUERY_REQUEST)
     33e:	01 30       	cpi	r16, 0x01	; 1
     340:	09 f0       	breq	.+2      	; 0x344 <_Z15handleSerialCmdPc+0x1a4>
     342:	9b c0       	rjmp	.+310    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
          Serial.println(FIRMWARE_VERSION, HEX);
     344:	40 e1       	ldi	r20, 0x10	; 16
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	62 e0       	ldi	r22, 0x02	; 2
     34a:	71 e0       	ldi	r23, 0x01	; 1
     34c:	84 e1       	ldi	r24, 0x14	; 20
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	0e 94 85 06 	call	0xd0a	; 0xd0a <_ZN5Print7printlnEii>
     354:	92 c0       	rjmp	.+292    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
      }
      // Frequency channel
      else if (!strncmp(strSerial, AT_FREQCHANNEL, 4))
     356:	44 e0       	ldi	r20, 0x04	; 4
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	6d e3       	ldi	r22, 0x3D	; 61
     35c:	71 e0       	ldi	r23, 0x01	; 1
     35e:	82 e9       	ldi	r24, 0x92	; 146
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <strncmp>
     366:	89 2b       	or	r24, r25
     368:	69 f4       	brne	.+26     	; 0x384 <_Z15handleSerialCmdPc+0x1e4>
      {
        if (atQuery == ATQUERY_COMMAND)
     36a:	01 11       	cpse	r16, r1
     36c:	06 c0       	rjmp	.+12     	; 0x37a <_Z15handleSerialCmdPc+0x1da>
        {
          panstamp.radio.setChannel(i);
     36e:	61 2f       	mov	r22, r17
     370:	8c ef       	ldi	r24, 0xFC	; 252
     372:	92 e0       	ldi	r25, 0x02	; 2
     374:	0e 94 dd 07 	call	0xfba	; 0xfba <_ZN6CC110110setChannelEh>
     378:	7a c0       	rjmp	.+244    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
          Serial.println("OK");
        }
        else
          Serial.println(panstamp.radio.channel, HEX);
     37a:	40 e1       	ldi	r20, 0x10	; 16
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	60 91 01 03 	lds	r22, 0x0301	; 0x800301 <panstamp+0x6>
     382:	62 c0       	rjmp	.+196    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
      }
      // Synchronization word
      else if (!strncmp(strSerial, AT_SYNCWORD, 4))
     384:	44 e0       	ldi	r20, 0x04	; 4
     386:	50 e0       	ldi	r21, 0x00	; 0
     388:	62 e4       	ldi	r22, 0x42	; 66
     38a:	71 e0       	ldi	r23, 0x01	; 1
     38c:	82 e9       	ldi	r24, 0x92	; 146
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <strncmp>
     394:	89 2b       	or	r24, r25
     396:	39 f5       	brne	.+78     	; 0x3e6 <_Z15handleSerialCmdPc+0x246>
      {
        if (atQuery == ATQUERY_COMMAND)
     398:	01 11       	cpse	r16, r1
     39a:	3c c0       	rjmp	.+120    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
        {
          if ((len-5) == 4)
     39c:	e9 e0       	ldi	r30, 0x09	; 9
     39e:	fe 12       	cpse	r15, r30
     3a0:	36 c0       	rjmp	.+108    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
          {
            arrV[0] = charToHex(strSerial[5]) << 4;
     3a2:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <strSerial+0x5>
     3a6:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9charToHexh>
     3aa:	18 2f       	mov	r17, r24
            arrV[0] |= charToHex(strSerial[6]);
     3ac:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <strSerial+0x6>
     3b0:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9charToHexh>
     3b4:	12 95       	swap	r17
     3b6:	10 7f       	andi	r17, 0xF0	; 240
     3b8:	81 2b       	or	r24, r17
     3ba:	89 83       	std	Y+1, r24	; 0x01
            arrV[1] = charToHex(strSerial[7]) << 4;
     3bc:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <strSerial+0x7>
     3c0:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9charToHexh>
     3c4:	18 2f       	mov	r17, r24
            arrV[1] |= charToHex(strSerial[8]);
     3c6:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <strSerial+0x8>
     3ca:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9charToHexh>
     3ce:	12 95       	swap	r17
     3d0:	10 7f       	andi	r17, 0xF0	; 240
     3d2:	81 2b       	or	r24, r17
     3d4:	8a 83       	std	Y+2, r24	; 0x02
            panstamp.radio.setSyncWord(arrV);
     3d6:	be 01       	movw	r22, r28
     3d8:	6f 5f       	subi	r22, 0xFF	; 255
     3da:	7f 4f       	sbci	r23, 0xFF	; 255
     3dc:	8c ef       	ldi	r24, 0xFC	; 252
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN6CC110111setSyncWordEPh>
     3e4:	44 c0       	rjmp	.+136    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
        {
          Serial.println((unsigned int)panstamp.radio.syncWord[0] << 8 | panstamp.radio.syncWord[1], HEX);
        }
      }
      // Device address
      else if (!strncmp(strSerial, AT_DEVADDRESS, 4))
     3e6:	44 e0       	ldi	r20, 0x04	; 4
     3e8:	50 e0       	ldi	r21, 0x00	; 0
     3ea:	6d e4       	ldi	r22, 0x4D	; 77
     3ec:	71 e0       	ldi	r23, 0x01	; 1
     3ee:	82 e9       	ldi	r24, 0x92	; 146
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <strncmp>
     3f6:	89 2b       	or	r24, r25
     3f8:	d9 f0       	breq	.+54     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
        }
        else
          Serial.println(panstamp.radio.devAddress, HEX);
      }
      // Address check
      else if (!strncmp(strSerial, AT_ADDRCHECK, 4))
     3fa:	44 e0       	ldi	r20, 0x04	; 4
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	62 e5       	ldi	r22, 0x52	; 82
     400:	71 e0       	ldi	r23, 0x01	; 1
     402:	82 e9       	ldi	r24, 0x92	; 146
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <strncmp>
     40a:	89 2b       	or	r24, r25
     40c:	11 f1       	breq	.+68     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
            arrV[1] |= charToHex(strSerial[8]);
            panstamp.radio.setSyncWord(arrV);
            Serial.println("OK");
          }
          else
            Serial.println("ERROR");
     40e:	67 e4       	ldi	r22, 0x47	; 71
     410:	71 e0       	ldi	r23, 0x01	; 1
     412:	2f c0       	rjmp	.+94     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
        }
        else
        {
          Serial.println((unsigned int)panstamp.radio.syncWord[0] << 8 | panstamp.radio.syncWord[1], HEX);
     414:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <panstamp+0x7>
     418:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <panstamp+0x8>
     41c:	76 27       	eor	r23, r22
     41e:	67 27       	eor	r22, r23
     420:	76 27       	eor	r23, r22
     422:	40 e1       	ldi	r20, 0x10	; 16
     424:	50 e0       	ldi	r21, 0x00	; 0
     426:	84 e1       	ldi	r24, 0x14	; 20
     428:	92 e0       	ldi	r25, 0x02	; 2
     42a:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZN5Print7printlnEji>
     42e:	25 c0       	rjmp	.+74     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
        }
      }
      // Device address
      else if (!strncmp(strSerial, AT_DEVADDRESS, 4))
      {
        if (atQuery == ATQUERY_COMMAND)
     430:	01 11       	cpse	r16, r1
     432:	06 c0       	rjmp	.+12     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
        {
          panstamp.radio.setDevAddress(i);
     434:	61 2f       	mov	r22, r17
     436:	8c ef       	ldi	r24, 0xFC	; 252
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <_ZN6CC110113setDevAddressEh>
     43e:	17 c0       	rjmp	.+46     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
          Serial.println("OK");
        }
        else
          Serial.println(panstamp.radio.devAddress, HEX);
     440:	40 e1       	ldi	r20, 0x10	; 16
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <panstamp+0x9>
     448:	84 e1       	ldi	r24, 0x14	; 20
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	0e 94 0c 06 	call	0xc18	; 0xc18 <_ZN5Print7printlnEhi>
     450:	14 c0       	rjmp	.+40     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
      }
      // Address check
      else if (!strncmp(strSerial, AT_ADDRCHECK, 4))
      {
        if (atQuery == ATQUERY_COMMAND)
     452:	01 11       	cpse	r16, r1
     454:	dc cf       	rjmp	.-72     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
        {
          if (i == 0)
     456:	11 11       	cpse	r17, r1
     458:	02 c0       	rjmp	.+4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
          {
            panstamp.radio.disableAddressCheck();
     45a:	44 e0       	ldi	r20, 0x04	; 4
     45c:	03 c0       	rjmp	.+6      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
            Serial.println("OK");
          }
          else if (i == 1)
     45e:	11 30       	cpi	r17, 0x01	; 1
     460:	b1 f6       	brne	.-84     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
          {
            panstamp.radio.enableAddressCheck();
     462:	46 e0       	ldi	r20, 0x06	; 6
     464:	67 e0       	ldi	r22, 0x07	; 7
     466:	8c ef       	ldi	r24, 0xFC	; 252
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
            Serial.println("OK");
     46e:	6b e1       	ldi	r22, 0x1B	; 27
     470:	71 e0       	ldi	r23, 0x01	; 1
     472:	84 e1       	ldi	r24, 0x14	; 20
     474:	92 e0       	ldi	r25, 0x02	; 2
     476:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN5Print7printlnEPKc>
      }
      else
        Serial.println("ERROR");
    }
  }
}
     47a:	cf 5b       	subi	r28, 0xBF	; 191
     47c:	df 4f       	sbci	r29, 0xFF	; 255
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	df 90       	pop	r13
     496:	cf 90       	pop	r12
     498:	bf 90       	pop	r11
     49a:	af 90       	pop	r10
     49c:	9f 90       	pop	r9
     49e:	8f 90       	pop	r8
     4a0:	08 95       	ret

000004a2 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     4a2:	26 e0       	ldi	r18, 0x06	; 6
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	56 e9       	ldi	r21, 0x96	; 150
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	84 e1       	ldi	r24, 0x14	; 20
     4ae:	92 e0       	ldi	r25, 0x02	; 2
     4b0:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN14HardwareSerial5beginEmh>
{
  //pinMode(LEDPIN, OUTPUT);
  //digitalWrite(LEDPIN, HIGH);

 Serial.begin(SERIAL_SPEED);
 Serial.flush();
     4b4:	84 e1       	ldi	r24, 0x14	; 20
     4b6:	92 e0       	ldi	r25, 0x02	; 2
     4b8:	0e 94 2b 04 	call	0x856	; 0x856 <_ZN14HardwareSerial5flushEv>
 Serial.println("");
     4bc:	6e e7       	ldi	r22, 0x7E	; 126
     4be:	71 e0       	ldi	r23, 0x01	; 1
     4c0:	84 e1       	ldi	r24, 0x14	; 20
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN5Print7printlnEPKc>
 
  
 panstamp.init();
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	8b ef       	ldi	r24, 0xFB	; 251
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_ZN8PANSTAMP4initEhh>
     * 
     * @param paLevel amplification value
     */
    inline void setTxPowerAmp(uint8_t paLevel)
    {
      writeReg(CC1101_PATABLE, paLevel);
     4d4:	40 ec       	ldi	r20, 0xC0	; 192
     4d6:	6e e3       	ldi	r22, 0x3E	; 62
     4d8:	8c ef       	ldi	r24, 0xFC	; 252
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  
  // Long distance board?
  //panstamp.radio.enableHGM();
  
  // Reset serial buffer
  memset(strSerial, 0, sizeof(strSerial));
     4e0:	80 e8       	ldi	r24, 0x80	; 128
     4e2:	e2 e9       	ldi	r30, 0x92	; 146
     4e4:	f1 e0       	ldi	r31, 0x01	; 1
     4e6:	df 01       	movw	r26, r30
     4e8:	1d 92       	st	X+, r1
     4ea:	8a 95       	dec	r24
     4ec:	e9 f7       	brne	.-6      	; 0x4e8 <setup+0x46>

  // Disable address check from the RF IC
  panstamp.radio.disableAddressCheck();
     4ee:	44 e0       	ldi	r20, 0x04	; 4
     4f0:	67 e0       	ldi	r22, 0x07	; 7
     4f2:	8c ef       	ldi	r24, 0xFC	; 252
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
     * 
     * @param funct pointer to the custom function
     */
     inline void attachInterrupt(void (*funct)(CCPACKET*))
     {
       ccPacketReceived = funct;
     4fa:	88 e8       	ldi	r24, 0x88	; 136
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <panstamp+0xc>
     502:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <panstamp+0xb>

  // Declare RF callback function
  panstamp.attachInterrupt(rfPacketReceived);
  
  // Initialize Timer object
  INIT_TIMER();
     506:	40 e2       	ldi	r20, 0x20	; 32
     508:	51 ea       	ldi	r21, 0xA1	; 161
     50a:	67 e0       	ldi	r22, 0x07	; 7
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	88 e0       	ldi	r24, 0x08	; 8
     510:	93 e0       	ldi	r25, 0x03	; 3
     512:	0e 94 98 0b 	call	0x1730	; 0x1730 <_ZN8TimerOne10initializeEl>
     516:	2f ef       	ldi	r18, 0xFF	; 255
     518:	3f ef       	ldi	r19, 0xFF	; 255
     51a:	a9 01       	movw	r20, r18
     51c:	60 e9       	ldi	r22, 0x90	; 144
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	88 e0       	ldi	r24, 0x08	; 8
     522:	93 e0       	ldi	r25, 0x03	; 3
     524:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN8TimerOne15attachInterruptEPFvvEl>
  Serial.println("Modem ready!");
     528:	67 e5       	ldi	r22, 0x57	; 87
     52a:	71 e0       	ldi	r23, 0x01	; 1
     52c:	84 e1       	ldi	r24, 0x14	; 20
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <_ZN5Print7printlnEPKc>

00000534 <loop>:
 * loop
 *
 * Arduino main loop
 */
void loop()
{
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
  // Read wireless packet?
  if (packetAvailable)
     53a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <packetAvailable>
     53e:	88 23       	and	r24, r24
     540:	09 f4       	brne	.+2      	; 0x544 <loop+0x10>
     542:	77 c0       	rjmp	.+238    	; 0x632 <loop+0xfe>
  {
    //digitalWrite(LEDPIN, HIGH);
    // Disable wireless reception
    panstamp.rxOff();
     544:	8b ef       	ldi	r24, 0xFB	; 251
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	0e 94 9e 0a 	call	0x153c	; 0x153c <_ZN8PANSTAMP5rxOffEv>

    byte i; 
    packetAvailable = false;
     54c:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <packetAvailable>

    if (serMode == SERMODE_DATA)
     550:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <serMode>
     554:	81 11       	cpse	r24, r1
     556:	69 c0       	rjmp	.+210    	; 0x62a <loop+0xf6>
    {
      uint8_t rssi = (uint8_t)(rxPacket->rssi & 0xFF);
     558:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <rxPacket>
     55c:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <rxPacket+0x1>
     560:	c7 ad       	ldd	r28, Z+63	; 0x3f
      Serial.print("(");
     562:	64 e6       	ldi	r22, 0x64	; 100
     564:	71 e0       	ldi	r23, 0x01	; 1
     566:	84 e1       	ldi	r24, 0x14	; 20
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN5Print5printEPKc>
      if (rssi < 0x10)
     56e:	c0 31       	cpi	r28, 0x10	; 16
     570:	30 f4       	brcc	.+12     	; 0x57e <loop+0x4a>
        Serial.print("0");
     572:	66 e6       	ldi	r22, 0x66	; 102
     574:	71 e0       	ldi	r23, 0x01	; 1
     576:	84 e1       	ldi	r24, 0x14	; 20
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN5Print5printEPKc>
      Serial.print(rssi, HEX);
     57e:	40 e1       	ldi	r20, 0x10	; 16
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	6c 2f       	mov	r22, r28
     584:	84 e1       	ldi	r24, 0x14	; 20
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	0e 94 05 06 	call	0xc0a	; 0xc0a <_ZN5Print5printEhi>
      if (rxPacket->lqi < 0x10)
     58c:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <rxPacket>
     590:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <rxPacket+0x1>
     594:	e0 5c       	subi	r30, 0xC0	; 192
     596:	ff 4f       	sbci	r31, 0xFF	; 255
     598:	80 81       	ld	r24, Z
     59a:	80 31       	cpi	r24, 0x10	; 16
     59c:	30 f4       	brcc	.+12     	; 0x5aa <loop+0x76>
        Serial.print("0");
     59e:	66 e6       	ldi	r22, 0x66	; 102
     5a0:	71 e0       	ldi	r23, 0x01	; 1
     5a2:	84 e1       	ldi	r24, 0x14	; 20
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN5Print5printEPKc>
      Serial.print(rxPacket->lqi, HEX);
     5aa:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <rxPacket>
     5ae:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <rxPacket+0x1>
     5b2:	e0 5c       	subi	r30, 0xC0	; 192
     5b4:	ff 4f       	sbci	r31, 0xFF	; 255
     5b6:	40 e1       	ldi	r20, 0x10	; 16
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	60 81       	ld	r22, Z
     5bc:	84 e1       	ldi	r24, 0x14	; 20
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	0e 94 05 06 	call	0xc0a	; 0xc0a <_ZN5Print5printEhi>
      Serial.print(")");
     5c4:	68 e6       	ldi	r22, 0x68	; 104
     5c6:	71 e0       	ldi	r23, 0x01	; 1
     5c8:	84 e1       	ldi	r24, 0x14	; 20
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN5Print5printEPKc>
      for(i=0 ; i<rxPacket->length ; i++)
     5d0:	c0 e0       	ldi	r28, 0x00	; 0
     5d2:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <rxPacket>
     5d6:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <rxPacket+0x1>
     5da:	80 81       	ld	r24, Z
     5dc:	c8 17       	cp	r28, r24
     5de:	f8 f4       	brcc	.+62     	; 0x61e <loop+0xea>
      {
        if (rxPacket->data[i] < 0x10)
     5e0:	0c 2f       	mov	r16, r28
     5e2:	10 e0       	ldi	r17, 0x00	; 0
     5e4:	e0 0f       	add	r30, r16
     5e6:	f1 1f       	adc	r31, r17
     5e8:	81 81       	ldd	r24, Z+1	; 0x01
     5ea:	80 31       	cpi	r24, 0x10	; 16
     5ec:	40 f4       	brcc	.+16     	; 0x5fe <loop+0xca>
          Serial.print(0, HEX);    // Leading zero
     5ee:	40 e1       	ldi	r20, 0x10	; 16
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	84 e1       	ldi	r24, 0x14	; 20
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEii>
        Serial.print(rxPacket->data[i], HEX);
     5fe:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <rxPacket>
     602:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <rxPacket+0x1>
     606:	fc 01       	movw	r30, r24
     608:	e0 0f       	add	r30, r16
     60a:	f1 1f       	adc	r31, r17
     60c:	40 e1       	ldi	r20, 0x10	; 16
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	61 81       	ldd	r22, Z+1	; 0x01
     612:	84 e1       	ldi	r24, 0x14	; 20
     614:	92 e0       	ldi	r25, 0x02	; 2
     616:	0e 94 05 06 	call	0xc0a	; 0xc0a <_ZN5Print5printEhi>
      Serial.print(rssi, HEX);
      if (rxPacket->lqi < 0x10)
        Serial.print("0");
      Serial.print(rxPacket->lqi, HEX);
      Serial.print(")");
      for(i=0 ; i<rxPacket->length ; i++)
     61a:	cf 5f       	subi	r28, 0xFF	; 255
     61c:	da cf       	rjmp	.-76     	; 0x5d2 <loop+0x9e>
      {
        if (rxPacket->data[i] < 0x10)
          Serial.print(0, HEX);    // Leading zero
        Serial.print(rxPacket->data[i], HEX);
      }
      Serial.println("");
     61e:	6e e7       	ldi	r22, 0x7E	; 126
     620:	71 e0       	ldi	r23, 0x01	; 1
     622:	84 e1       	ldi	r24, 0x14	; 20
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN5Print7printlnEPKc>
    }

    // Enable wireless reception
    panstamp.rxOn();
     62a:	8b ef       	ldi	r24, 0xFB	; 251
     62c:	92 e0       	ldi	r25, 0x02	; 2
     62e:	0e 94 97 0a 	call	0x152e	; 0x152e <_ZN8PANSTAMP4rxOnEv>
    //digitalWrite(LEDPIN, LOW);
  }

  // Read serial command
  if (Serial.available() > 0)
     632:	84 e1       	ldi	r24, 0x14	; 20
     634:	92 e0       	ldi	r25, 0x02	; 2
     636:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_ZN14HardwareSerial9availableEv>
     63a:	18 16       	cp	r1, r24
     63c:	19 06       	cpc	r1, r25
     63e:	0c f0       	brlt	.+2      	; 0x642 <loop+0x10e>
     640:	4c c0       	rjmp	.+152    	; 0x6da <loop+0x1a6>
  {
    // Disable wireless reception
    panstamp.rxOff();
     642:	8b ef       	ldi	r24, 0xFB	; 251
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	0e 94 9e 0a 	call	0x153c	; 0x153c <_ZN8PANSTAMP5rxOffEv>

    ch = Serial.read();
     64a:	84 e1       	ldi	r24, 0x14	; 20
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	0e 94 8b 03 	call	0x716	; 0x716 <_ZN14HardwareSerial4readEv>
     652:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <ch>

    if (len >= SERIAL_BUF_LEN-1)
     656:	20 91 8f 01 	lds	r18, 0x018F	; 0x80018f <len>
     65a:	30 91 90 01 	lds	r19, 0x0190	; 0x800190 <len+0x1>
     65e:	2f 37       	cpi	r18, 0x7F	; 127
     660:	31 05       	cpc	r19, r1
     662:	8c f4       	brge	.+34     	; 0x686 <loop+0x152>
    {
      memset(strSerial, 0, sizeof(strSerial));
      len = 0;
    }
    else if (ch == 0x0D) 
     664:	8d 30       	cpi	r24, 0x0D	; 13
     666:	d9 f4       	brne	.+54     	; 0x69e <loop+0x16a>
    {
      STOP_TIMER();
     668:	88 e0       	ldi	r24, 0x08	; 8
     66a:	93 e0       	ldi	r25, 0x03	; 3
     66c:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN8TimerOne15detachInterruptEv>
      strSerial[len] = 0;
     670:	e0 91 8f 01 	lds	r30, 0x018F	; 0x80018f <len>
     674:	f0 91 90 01 	lds	r31, 0x0190	; 0x800190 <len+0x1>
     678:	ee 56       	subi	r30, 0x6E	; 110
     67a:	fe 4f       	sbci	r31, 0xFE	; 254
     67c:	10 82       	st	Z, r1
      handleSerialCmd(strSerial);
     67e:	82 e9       	ldi	r24, 0x92	; 146
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z15handleSerialCmdPc>
      memset(strSerial, 0, sizeof(strSerial));
     686:	80 e8       	ldi	r24, 0x80	; 128
     688:	e2 e9       	ldi	r30, 0x92	; 146
     68a:	f1 e0       	ldi	r31, 0x01	; 1
     68c:	df 01       	movw	r26, r30
     68e:	1d 92       	st	X+, r1
     690:	8a 95       	dec	r24
     692:	e9 f7       	brne	.-6      	; 0x68e <loop+0x15a>
      len = 0;
     694:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <len+0x1>
     698:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <len>
     69c:	17 c0       	rjmp	.+46     	; 0x6cc <loop+0x198>
    }
    else if (ch!= 0x0A)
     69e:	8a 30       	cpi	r24, 0x0A	; 10
     6a0:	a9 f0       	breq	.+42     	; 0x6cc <loop+0x198>
    {
      strSerial[len] = ch; 
     6a2:	f9 01       	movw	r30, r18
     6a4:	ee 56       	subi	r30, 0x6E	; 110
     6a6:	fe 4f       	sbci	r31, 0xFE	; 254
     6a8:	80 83       	st	Z, r24
      len++;
     6aa:	2f 5f       	subi	r18, 0xFF	; 255
     6ac:	3f 4f       	sbci	r19, 0xFF	; 255
     6ae:	30 93 90 01 	sts	0x0190, r19	; 0x800190 <len+0x1>
     6b2:	20 93 8f 01 	sts	0x018F, r18	; 0x80018f <len>
      START_TIMER();
     6b6:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <__data_end>
     6ba:	2f ef       	ldi	r18, 0xFF	; 255
     6bc:	3f ef       	ldi	r19, 0xFF	; 255
     6be:	a9 01       	movw	r20, r18
     6c0:	60 e9       	ldi	r22, 0x90	; 144
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	88 e0       	ldi	r24, 0x08	; 8
     6c6:	93 e0       	ldi	r25, 0x03	; 3
     6c8:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN8TimerOne15attachInterruptEPFvvEl>
    }

    // Enable wireless reception
    panstamp.rxOn();
     6cc:	8b ef       	ldi	r24, 0xFB	; 251
     6ce:	92 e0       	ldi	r25, 0x02	; 2
  }
}
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
      len++;
      START_TIMER();
    }

    // Enable wireless reception
    panstamp.rxOn();
     6d6:	0c 94 97 0a 	jmp	0x152e	; 0x152e <_ZN8PANSTAMP4rxOnEv>
  }
}
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	08 95       	ret

000006e2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     6e2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     6e4:	91 8d       	ldd	r25, Z+25	; 0x19
     6e6:	22 8d       	ldd	r18, Z+26	; 0x1a
     6e8:	89 2f       	mov	r24, r25
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	80 5c       	subi	r24, 0xC0	; 192
     6ee:	9f 4f       	sbci	r25, 0xFF	; 255
     6f0:	82 1b       	sub	r24, r18
     6f2:	91 09       	sbc	r25, r1
}
     6f4:	8f 73       	andi	r24, 0x3F	; 63
     6f6:	99 27       	eor	r25, r25
     6f8:	08 95       	ret

000006fa <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     6fa:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     6fc:	91 8d       	ldd	r25, Z+25	; 0x19
     6fe:	82 8d       	ldd	r24, Z+26	; 0x1a
     700:	98 17       	cp	r25, r24
     702:	31 f0       	breq	.+12     	; 0x710 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     704:	82 8d       	ldd	r24, Z+26	; 0x1a
     706:	e8 0f       	add	r30, r24
     708:	f1 1d       	adc	r31, r1
     70a:	85 8d       	ldd	r24, Z+29	; 0x1d
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     714:	08 95       	ret

00000716 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     716:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     718:	91 8d       	ldd	r25, Z+25	; 0x19
     71a:	82 8d       	ldd	r24, Z+26	; 0x1a
     71c:	98 17       	cp	r25, r24
     71e:	61 f0       	breq	.+24     	; 0x738 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     720:	82 8d       	ldd	r24, Z+26	; 0x1a
     722:	df 01       	movw	r26, r30
     724:	a8 0f       	add	r26, r24
     726:	b1 1d       	adc	r27, r1
     728:	5d 96       	adiw	r26, 0x1d	; 29
     72a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     72c:	92 8d       	ldd	r25, Z+26	; 0x1a
     72e:	9f 5f       	subi	r25, 0xFF	; 255
     730:	9f 73       	andi	r25, 0x3F	; 63
     732:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     73c:	08 95       	ret

0000073e <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     73e:	fc 01       	movw	r30, r24
     740:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     742:	44 8d       	ldd	r20, Z+28	; 0x1c
     744:	25 2f       	mov	r18, r21
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	84 2f       	mov	r24, r20
     74a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     74c:	82 1b       	sub	r24, r18
     74e:	93 0b       	sbc	r25, r19
     750:	54 17       	cp	r21, r20
     752:	10 f0       	brcs	.+4      	; 0x758 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     754:	cf 96       	adiw	r24, 0x3f	; 63
     756:	08 95       	ret
  return tail - head - 1;
     758:	01 97       	sbiw	r24, 0x01	; 1
}
     75a:	08 95       	ret

0000075c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     75c:	8a e0       	ldi	r24, 0x0A	; 10
     75e:	95 e0       	ldi	r25, 0x05	; 5
     760:	89 2b       	or	r24, r25
     762:	49 f0       	breq	.+18     	; 0x776 <_Z14serialEventRunv+0x1a>
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	89 2b       	or	r24, r25
     76a:	29 f0       	breq	.+10     	; 0x776 <_Z14serialEventRunv+0x1a>
     76c:	0e 94 0a 05 	call	0xa14	; 0xa14 <_Z17Serial0_availablev>
     770:	81 11       	cpse	r24, r1
     772:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     776:	08 95       	ret

00000778 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     778:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     77a:	84 8d       	ldd	r24, Z+28	; 0x1c
     77c:	df 01       	movw	r26, r30
     77e:	a8 0f       	add	r26, r24
     780:	b1 1d       	adc	r27, r1
     782:	a3 5a       	subi	r26, 0xA3	; 163
     784:	bf 4f       	sbci	r27, 0xFF	; 255
     786:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     788:	84 8d       	ldd	r24, Z+28	; 0x1c
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	8f 73       	andi	r24, 0x3F	; 63
     790:	99 27       	eor	r25, r25
     792:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     794:	a6 89       	ldd	r26, Z+22	; 0x16
     796:	b7 89       	ldd	r27, Z+23	; 0x17
     798:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     79a:	a0 89       	ldd	r26, Z+16	; 0x10
     79c:	b1 89       	ldd	r27, Z+17	; 0x11
     79e:	8c 91       	ld	r24, X
     7a0:	83 70       	andi	r24, 0x03	; 3
     7a2:	80 64       	ori	r24, 0x40	; 64
     7a4:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     7a6:	93 8d       	ldd	r25, Z+27	; 0x1b
     7a8:	84 8d       	ldd	r24, Z+28	; 0x1c
     7aa:	98 13       	cpse	r25, r24
     7ac:	06 c0       	rjmp	.+12     	; 0x7ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     7ae:	02 88       	ldd	r0, Z+18	; 0x12
     7b0:	f3 89       	ldd	r31, Z+19	; 0x13
     7b2:	e0 2d       	mov	r30, r0
     7b4:	80 81       	ld	r24, Z
     7b6:	8f 7d       	andi	r24, 0xDF	; 223
     7b8:	80 83       	st	Z, r24
     7ba:	08 95       	ret

000007bc <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	ec 01       	movw	r28, r24
  _written = true;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     7ce:	9b 8d       	ldd	r25, Y+27	; 0x1b
     7d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7d2:	98 13       	cpse	r25, r24
     7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <_ZN14HardwareSerial5writeEh+0x24>
     7d6:	e8 89       	ldd	r30, Y+16	; 0x10
     7d8:	f9 89       	ldd	r31, Y+17	; 0x11
     7da:	80 81       	ld	r24, Z
     7dc:	85 fd       	sbrc	r24, 5
     7de:	26 c0       	rjmp	.+76     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     7e0:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     7e2:	0b 8d       	ldd	r16, Y+27	; 0x1b
     7e4:	10 e0       	ldi	r17, 0x00	; 0
     7e6:	0f 5f       	subi	r16, 0xFF	; 255
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	0f 73       	andi	r16, 0x3F	; 63
     7ec:	11 27       	eor	r17, r17
     7ee:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     7f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7f2:	e8 12       	cpse	r14, r24
     7f4:	0c c0       	rjmp	.+24     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
    if (bit_is_clear(SREG, SREG_I)) {
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	07 fc       	sbrc	r0, 7
     7fa:	fa cf       	rjmp	.-12     	; 0x7f0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     7fc:	e8 89       	ldd	r30, Y+16	; 0x10
     7fe:	f9 89       	ldd	r31, Y+17	; 0x11
     800:	80 81       	ld	r24, Z
     802:	85 ff       	sbrs	r24, 5
     804:	f5 cf       	rjmp	.-22     	; 0x7f0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     806:	ce 01       	movw	r24, r28
     808:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     80c:	f1 cf       	rjmp	.-30     	; 0x7f0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     80e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     810:	fe 01       	movw	r30, r28
     812:	e8 0f       	add	r30, r24
     814:	f1 1d       	adc	r31, r1
     816:	e3 5a       	subi	r30, 0xA3	; 163
     818:	ff 4f       	sbci	r31, 0xFF	; 255
     81a:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     81c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     81e:	f8 94       	cli
    _tx_buffer_head = i;
     820:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     822:	ea 89       	ldd	r30, Y+18	; 0x12
     824:	fb 89       	ldd	r31, Y+19	; 0x13
     826:	80 81       	ld	r24, Z
     828:	80 62       	ori	r24, 0x20	; 32
     82a:	0a c0       	rjmp	.+20     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     82c:	9f b7       	in	r25, 0x3f	; 63
     82e:	f8 94       	cli
      *_udr = c;
     830:	ee 89       	ldd	r30, Y+22	; 0x16
     832:	ff 89       	ldd	r31, Y+23	; 0x17
     834:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     836:	e8 89       	ldd	r30, Y+16	; 0x10
     838:	f9 89       	ldd	r31, Y+17	; 0x11
     83a:	80 81       	ld	r24, Z
     83c:	83 70       	andi	r24, 0x03	; 3
     83e:	80 64       	ori	r24, 0x40	; 64
     840:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     842:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	08 95       	ret

00000856 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     85c:	88 8d       	ldd	r24, Y+24	; 0x18
     85e:	88 23       	and	r24, r24
     860:	c9 f0       	breq	.+50     	; 0x894 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     862:	ea 89       	ldd	r30, Y+18	; 0x12
     864:	fb 89       	ldd	r31, Y+19	; 0x13
     866:	80 81       	ld	r24, Z
     868:	85 fd       	sbrc	r24, 5
     86a:	05 c0       	rjmp	.+10     	; 0x876 <_ZN14HardwareSerial5flushEv+0x20>
     86c:	a8 89       	ldd	r26, Y+16	; 0x10
     86e:	b9 89       	ldd	r27, Y+17	; 0x11
     870:	8c 91       	ld	r24, X
     872:	86 fd       	sbrc	r24, 6
     874:	0f c0       	rjmp	.+30     	; 0x894 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	07 fc       	sbrc	r0, 7
     87a:	f5 cf       	rjmp	.-22     	; 0x866 <_ZN14HardwareSerial5flushEv+0x10>
     87c:	80 81       	ld	r24, Z
     87e:	85 ff       	sbrs	r24, 5
     880:	f2 cf       	rjmp	.-28     	; 0x866 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     882:	a8 89       	ldd	r26, Y+16	; 0x10
     884:	b9 89       	ldd	r27, Y+17	; 0x11
     886:	8c 91       	ld	r24, X
     888:	85 ff       	sbrs	r24, 5
     88a:	ed cf       	rjmp	.-38     	; 0x866 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     88c:	ce 01       	movw	r24, r28
     88e:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     892:	e7 cf       	rjmp	.-50     	; 0x862 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     89a:	cf 92       	push	r12
     89c:	df 92       	push	r13
     89e:	ef 92       	push	r14
     8a0:	ff 92       	push	r15
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	ec 01       	movw	r28, r24
     8aa:	6a 01       	movw	r12, r20
     8ac:	7b 01       	movw	r14, r22
     8ae:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     8b0:	e8 89       	ldd	r30, Y+16	; 0x10
     8b2:	f9 89       	ldd	r31, Y+17	; 0x11
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     8b8:	41 15       	cp	r20, r1
     8ba:	51 4e       	sbci	r21, 0xE1	; 225
     8bc:	61 05       	cpc	r22, r1
     8be:	71 05       	cpc	r23, r1
     8c0:	b1 f0       	breq	.+44     	; 0x8ee <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	79 e0       	ldi	r23, 0x09	; 9
     8c6:	8d e3       	ldi	r24, 0x3D	; 61
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	a7 01       	movw	r20, r14
     8cc:	96 01       	movw	r18, r12
     8ce:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__udivmodsi4>
     8d2:	da 01       	movw	r26, r20
     8d4:	c9 01       	movw	r24, r18
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	a1 09       	sbc	r26, r1
     8da:	b1 09       	sbc	r27, r1
     8dc:	b6 95       	lsr	r27
     8de:	a7 95       	ror	r26
     8e0:	97 95       	ror	r25
     8e2:	87 95       	ror	r24
     8e4:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     8e6:	21 15       	cp	r18, r1
     8e8:	80 e1       	ldi	r24, 0x10	; 16
     8ea:	38 07       	cpc	r19, r24
     8ec:	a8 f0       	brcs	.+42     	; 0x918 <__stack+0x19>
  {
    *_ucsra = 0;
     8ee:	e8 89       	ldd	r30, Y+16	; 0x10
     8f0:	f9 89       	ldd	r31, Y+17	; 0x11
     8f2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     8f4:	60 e8       	ldi	r22, 0x80	; 128
     8f6:	74 e8       	ldi	r23, 0x84	; 132
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a7 01       	movw	r20, r14
     8fe:	96 01       	movw	r18, r12
     900:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__udivmodsi4>
     904:	da 01       	movw	r26, r20
     906:	c9 01       	movw	r24, r18
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	a1 09       	sbc	r26, r1
     90c:	b1 09       	sbc	r27, r1
     90e:	b6 95       	lsr	r27
     910:	a7 95       	ror	r26
     912:	97 95       	ror	r25
     914:	87 95       	ror	r24
     916:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     918:	ec 85       	ldd	r30, Y+12	; 0x0c
     91a:	fd 85       	ldd	r31, Y+13	; 0x0d
     91c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     91e:	ee 85       	ldd	r30, Y+14	; 0x0e
     920:	ff 85       	ldd	r31, Y+15	; 0x0f
     922:	20 83       	st	Z, r18

  _written = false;
     924:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     926:	ec 89       	ldd	r30, Y+20	; 0x14
     928:	fd 89       	ldd	r31, Y+21	; 0x15
     92a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     92c:	ea 89       	ldd	r30, Y+18	; 0x12
     92e:	fb 89       	ldd	r31, Y+19	; 0x13
     930:	80 81       	ld	r24, Z
     932:	80 61       	ori	r24, 0x10	; 16
     934:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     936:	ea 89       	ldd	r30, Y+18	; 0x12
     938:	fb 89       	ldd	r31, Y+19	; 0x13
     93a:	80 81       	ld	r24, Z
     93c:	88 60       	ori	r24, 0x08	; 8
     93e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     940:	ea 89       	ldd	r30, Y+18	; 0x12
     942:	fb 89       	ldd	r31, Y+19	; 0x13
     944:	80 81       	ld	r24, Z
     946:	80 68       	ori	r24, 0x80	; 128
     948:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     94a:	ea 89       	ldd	r30, Y+18	; 0x12
     94c:	fb 89       	ldd	r31, Y+19	; 0x13
     94e:	80 81       	ld	r24, Z
     950:	8f 7d       	andi	r24, 0xDF	; 223
     952:	80 83       	st	Z, r24
}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	df 90       	pop	r13
     960:	cf 90       	pop	r12
     962:	08 95       	ret

00000964 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     964:	1f 92       	push	r1
     966:	0f 92       	push	r0
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	0f 92       	push	r0
     96c:	11 24       	eor	r1, r1
     96e:	2f 93       	push	r18
     970:	8f 93       	push	r24
     972:	9f 93       	push	r25
     974:	ef 93       	push	r30
     976:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     978:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <Serial+0x10>
     97c:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <Serial+0x11>
     980:	80 81       	ld	r24, Z
     982:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <Serial+0x16>
     986:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <Serial+0x17>
     98a:	82 fd       	sbrc	r24, 2
     98c:	12 c0       	rjmp	.+36     	; 0x9b2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     98e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     990:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <Serial+0x19>
     994:	8f 5f       	subi	r24, 0xFF	; 255
     996:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     998:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <Serial+0x1a>
     99c:	82 17       	cp	r24, r18
     99e:	51 f0       	breq	.+20     	; 0x9b4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     9a0:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <Serial+0x19>
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	ec 5e       	subi	r30, 0xEC	; 236
     9a8:	fd 4f       	sbci	r31, 0xFD	; 253
     9aa:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     9ac:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <Serial+0x19>
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     9b2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     9b4:	ff 91       	pop	r31
     9b6:	ef 91       	pop	r30
     9b8:	9f 91       	pop	r25
     9ba:	8f 91       	pop	r24
     9bc:	2f 91       	pop	r18
     9be:	0f 90       	pop	r0
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	0f 90       	pop	r0
     9c4:	1f 90       	pop	r1
     9c6:	18 95       	reti

000009c8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     9c8:	1f 92       	push	r1
     9ca:	0f 92       	push	r0
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	0f 92       	push	r0
     9d0:	11 24       	eor	r1, r1
     9d2:	2f 93       	push	r18
     9d4:	3f 93       	push	r19
     9d6:	4f 93       	push	r20
     9d8:	5f 93       	push	r21
     9da:	6f 93       	push	r22
     9dc:	7f 93       	push	r23
     9de:	8f 93       	push	r24
     9e0:	9f 93       	push	r25
     9e2:	af 93       	push	r26
     9e4:	bf 93       	push	r27
     9e6:	ef 93       	push	r30
     9e8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     9ea:	84 e1       	ldi	r24, 0x14	; 20
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     9f2:	ff 91       	pop	r31
     9f4:	ef 91       	pop	r30
     9f6:	bf 91       	pop	r27
     9f8:	af 91       	pop	r26
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	7f 91       	pop	r23
     a00:	6f 91       	pop	r22
     a02:	5f 91       	pop	r21
     a04:	4f 91       	pop	r20
     a06:	3f 91       	pop	r19
     a08:	2f 91       	pop	r18
     a0a:	0f 90       	pop	r0
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	0f 90       	pop	r0
     a10:	1f 90       	pop	r1
     a12:	18 95       	reti

00000a14 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     a14:	84 e1       	ldi	r24, 0x14	; 20
     a16:	92 e0       	ldi	r25, 0x02	; 2
     a18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_ZN14HardwareSerial9availableEv>
     a1c:	21 e0       	ldi	r18, 0x01	; 1
     a1e:	89 2b       	or	r24, r25
     a20:	09 f4       	brne	.+2      	; 0xa24 <_Z17Serial0_availablev+0x10>
     a22:	20 e0       	ldi	r18, 0x00	; 0
}
     a24:	82 2f       	mov	r24, r18
     a26:	08 95       	ret

00000a28 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     a28:	e4 e1       	ldi	r30, 0x14	; 20
     a2a:	f2 e0       	ldi	r31, 0x02	; 2
     a2c:	13 82       	std	Z+3, r1	; 0x03
     a2e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     a30:	88 ee       	ldi	r24, 0xE8	; 232
     a32:	93 e0       	ldi	r25, 0x03	; 3
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	84 83       	std	Z+4, r24	; 0x04
     a3a:	95 83       	std	Z+5, r25	; 0x05
     a3c:	a6 83       	std	Z+6, r26	; 0x06
     a3e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     a40:	8e e6       	ldi	r24, 0x6E	; 110
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	91 83       	std	Z+1, r25	; 0x01
     a46:	80 83       	st	Z, r24
     a48:	85 ec       	ldi	r24, 0xC5	; 197
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	95 87       	std	Z+13, r25	; 0x0d
     a4e:	84 87       	std	Z+12, r24	; 0x0c
     a50:	84 ec       	ldi	r24, 0xC4	; 196
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	97 87       	std	Z+15, r25	; 0x0f
     a56:	86 87       	std	Z+14, r24	; 0x0e
     a58:	80 ec       	ldi	r24, 0xC0	; 192
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	91 8b       	std	Z+17, r25	; 0x11
     a5e:	80 8b       	std	Z+16, r24	; 0x10
     a60:	81 ec       	ldi	r24, 0xC1	; 193
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	93 8b       	std	Z+19, r25	; 0x13
     a66:	82 8b       	std	Z+18, r24	; 0x12
     a68:	82 ec       	ldi	r24, 0xC2	; 194
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	95 8b       	std	Z+21, r25	; 0x15
     a6e:	84 8b       	std	Z+20, r24	; 0x14
     a70:	86 ec       	ldi	r24, 0xC6	; 198
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	97 8b       	std	Z+23, r25	; 0x17
     a76:	86 8b       	std	Z+22, r24	; 0x16
     a78:	11 8e       	std	Z+25, r1	; 0x19
     a7a:	12 8e       	std	Z+26, r1	; 0x1a
     a7c:	13 8e       	std	Z+27, r1	; 0x1b
     a7e:	14 8e       	std	Z+28, r1	; 0x1c
     a80:	08 95       	ret

00000a82 <initVariant>:
     a82:	08 95       	ret

00000a84 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     a84:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <init>

	initVariant();
     a88:	0e 94 41 05 	call	0xa82	; 0xa82 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     a8c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     a90:	ce ea       	ldi	r28, 0xAE	; 174
     a92:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     a94:	0e 94 9a 02 	call	0x534	; 0x534 <loop>
		if (serialEventRun) serialEventRun();
     a98:	20 97       	sbiw	r28, 0x00	; 0
     a9a:	e1 f3       	breq	.-8      	; 0xa94 <main+0x10>
     a9c:	0e 94 ae 03 	call	0x75c	; 0x75c <_Z14serialEventRunv>
     aa0:	f9 cf       	rjmp	.-14     	; 0xa94 <main+0x10>

00000aa2 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     aa2:	cf 92       	push	r12
     aa4:	df 92       	push	r13
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	6c 01       	movw	r12, r24
     ab4:	7a 01       	movw	r14, r20
     ab6:	8b 01       	movw	r16, r22
     ab8:	c0 e0       	ldi	r28, 0x00	; 0
     aba:	d0 e0       	ldi	r29, 0x00	; 0
     abc:	ce 15       	cp	r28, r14
     abe:	df 05       	cpc	r29, r15
     ac0:	81 f0       	breq	.+32     	; 0xae2 <_ZN5Print5writeEPKhj+0x40>
     ac2:	d8 01       	movw	r26, r16
     ac4:	6d 91       	ld	r22, X+
     ac6:	8d 01       	movw	r16, r26
     ac8:	d6 01       	movw	r26, r12
     aca:	ed 91       	ld	r30, X+
     acc:	fc 91       	ld	r31, X
     ace:	01 90       	ld	r0, Z+
     ad0:	f0 81       	ld	r31, Z
     ad2:	e0 2d       	mov	r30, r0
     ad4:	c6 01       	movw	r24, r12
     ad6:	09 95       	icall
     ad8:	89 2b       	or	r24, r25
     ada:	11 f0       	breq	.+4      	; 0xae0 <_ZN5Print5writeEPKhj+0x3e>
     adc:	21 96       	adiw	r28, 0x01	; 1
     ade:	ee cf       	rjmp	.-36     	; 0xabc <_ZN5Print5writeEPKhj+0x1a>
     ae0:	7e 01       	movw	r14, r28
     ae2:	c7 01       	movw	r24, r14
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	df 90       	pop	r13
     af2:	cf 90       	pop	r12
     af4:	08 95       	ret

00000af6 <_ZN5Print5writeEPKc>:
     af6:	61 15       	cp	r22, r1
     af8:	71 05       	cpc	r23, r1
     afa:	79 f0       	breq	.+30     	; 0xb1a <_ZN5Print5writeEPKc+0x24>
     afc:	fb 01       	movw	r30, r22
     afe:	01 90       	ld	r0, Z+
     b00:	00 20       	and	r0, r0
     b02:	e9 f7       	brne	.-6      	; 0xafe <_ZN5Print5writeEPKc+0x8>
     b04:	31 97       	sbiw	r30, 0x01	; 1
     b06:	af 01       	movw	r20, r30
     b08:	46 1b       	sub	r20, r22
     b0a:	57 0b       	sbc	r21, r23
     b0c:	dc 01       	movw	r26, r24
     b0e:	ed 91       	ld	r30, X+
     b10:	fc 91       	ld	r31, X
     b12:	02 80       	ldd	r0, Z+2	; 0x02
     b14:	f3 81       	ldd	r31, Z+3	; 0x03
     b16:	e0 2d       	mov	r30, r0
     b18:	09 94       	ijmp
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	08 95       	ret

00000b20 <_ZN5Print5printEPKc>:
     b20:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <_ZN5Print5writeEPKc>

00000b24 <_ZN5Print5printEc>:
     b24:	dc 01       	movw	r26, r24
     b26:	ed 91       	ld	r30, X+
     b28:	fc 91       	ld	r31, X
     b2a:	01 90       	ld	r0, Z+
     b2c:	f0 81       	ld	r31, Z
     b2e:	e0 2d       	mov	r30, r0
     b30:	09 94       	ijmp

00000b32 <_ZN5Print7printlnEv>:
     b32:	6c e7       	ldi	r22, 0x7C	; 124
     b34:	71 e0       	ldi	r23, 0x01	; 1
     b36:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <_ZN5Print5writeEPKc>

00000b3a <_ZN5Print7printlnEPKc>:
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	ec 01       	movw	r28, r24
     b44:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN5Print5writeEPKc>
     b48:	8c 01       	movw	r16, r24
     b4a:	ce 01       	movw	r24, r28
     b4c:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN5Print7printlnEv>
     b50:	80 0f       	add	r24, r16
     b52:	91 1f       	adc	r25, r17
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	1f 91       	pop	r17
     b5a:	0f 91       	pop	r16
     b5c:	08 95       	ret

00000b5e <_ZN5Print11printNumberEmh>:
     b5e:	8f 92       	push	r8
     b60:	9f 92       	push	r9
     b62:	af 92       	push	r10
     b64:	bf 92       	push	r11
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	a1 97       	sbiw	r28, 0x21	; 33
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	7c 01       	movw	r14, r24
     b84:	fa 01       	movw	r30, r20
     b86:	cb 01       	movw	r24, r22
     b88:	19 a2       	std	Y+33, r1	; 0x21
     b8a:	22 30       	cpi	r18, 0x02	; 2
     b8c:	08 f4       	brcc	.+2      	; 0xb90 <_ZN5Print11printNumberEmh+0x32>
     b8e:	2a e0       	ldi	r18, 0x0A	; 10
     b90:	8e 01       	movw	r16, r28
     b92:	0f 5d       	subi	r16, 0xDF	; 223
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
     b96:	82 2e       	mov	r8, r18
     b98:	91 2c       	mov	r9, r1
     b9a:	a1 2c       	mov	r10, r1
     b9c:	b1 2c       	mov	r11, r1
     b9e:	bf 01       	movw	r22, r30
     ba0:	a5 01       	movw	r20, r10
     ba2:	94 01       	movw	r18, r8
     ba4:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__udivmodsi4>
     ba8:	f9 01       	movw	r30, r18
     baa:	ca 01       	movw	r24, r20
     bac:	01 50       	subi	r16, 0x01	; 1
     bae:	11 09       	sbc	r17, r1
     bb0:	6a 30       	cpi	r22, 0x0A	; 10
     bb2:	10 f4       	brcc	.+4      	; 0xbb8 <_ZN5Print11printNumberEmh+0x5a>
     bb4:	60 5d       	subi	r22, 0xD0	; 208
     bb6:	01 c0       	rjmp	.+2      	; 0xbba <_ZN5Print11printNumberEmh+0x5c>
     bb8:	69 5c       	subi	r22, 0xC9	; 201
     bba:	d8 01       	movw	r26, r16
     bbc:	6c 93       	st	X, r22
     bbe:	23 2b       	or	r18, r19
     bc0:	24 2b       	or	r18, r20
     bc2:	25 2b       	or	r18, r21
     bc4:	61 f7       	brne	.-40     	; 0xb9e <_ZN5Print11printNumberEmh+0x40>
     bc6:	b8 01       	movw	r22, r16
     bc8:	c7 01       	movw	r24, r14
     bca:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN5Print5writeEPKc>
     bce:	a1 96       	adiw	r28, 0x21	; 33
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	bf 90       	pop	r11
     be8:	af 90       	pop	r10
     bea:	9f 90       	pop	r9
     bec:	8f 90       	pop	r8
     bee:	08 95       	ret

00000bf0 <_ZN5Print5printEmi>:
     bf0:	21 15       	cp	r18, r1
     bf2:	31 05       	cpc	r19, r1
     bf4:	41 f4       	brne	.+16     	; 0xc06 <_ZN5Print5printEmi+0x16>
     bf6:	dc 01       	movw	r26, r24
     bf8:	ed 91       	ld	r30, X+
     bfa:	fc 91       	ld	r31, X
     bfc:	01 90       	ld	r0, Z+
     bfe:	f0 81       	ld	r31, Z
     c00:	e0 2d       	mov	r30, r0
     c02:	64 2f       	mov	r22, r20
     c04:	09 94       	ijmp
     c06:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <_ZN5Print11printNumberEmh>

00000c0a <_ZN5Print5printEhi>:
     c0a:	9a 01       	movw	r18, r20
     c0c:	46 2f       	mov	r20, r22
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <_ZN5Print5printEmi>

00000c18 <_ZN5Print7printlnEhi>:
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	ec 01       	movw	r28, r24
     c22:	0e 94 05 06 	call	0xc0a	; 0xc0a <_ZN5Print5printEhi>
     c26:	8c 01       	movw	r16, r24
     c28:	ce 01       	movw	r24, r28
     c2a:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN5Print7printlnEv>
     c2e:	80 0f       	add	r24, r16
     c30:	91 1f       	adc	r25, r17
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	08 95       	ret

00000c3c <_ZN5Print5printEji>:
     c3c:	9a 01       	movw	r18, r20
     c3e:	ab 01       	movw	r20, r22
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <_ZN5Print5printEmi>

00000c48 <_ZN5Print7printlnEji>:
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	ec 01       	movw	r28, r24
     c52:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN5Print5printEji>
     c56:	8c 01       	movw	r16, r24
     c58:	ce 01       	movw	r24, r28
     c5a:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN5Print7printlnEv>
     c5e:	80 0f       	add	r24, r16
     c60:	91 1f       	adc	r25, r17
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	08 95       	ret

00000c6c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     c6c:	cf 92       	push	r12
     c6e:	df 92       	push	r13
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
  if (base == 0) {
     c7c:	21 15       	cp	r18, r1
     c7e:	31 05       	cpc	r19, r1
     c80:	81 f4       	brne	.+32     	; 0xca2 <_ZN5Print5printEli+0x36>
    return write(n);
     c82:	dc 01       	movw	r26, r24
     c84:	ed 91       	ld	r30, X+
     c86:	fc 91       	ld	r31, X
     c88:	01 90       	ld	r0, Z+
     c8a:	f0 81       	ld	r31, Z
     c8c:	e0 2d       	mov	r30, r0
     c8e:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     ca0:	09 94       	ijmp
  } else if (base == 10) {
     ca2:	2a 30       	cpi	r18, 0x0A	; 10
     ca4:	31 05       	cpc	r19, r1
     ca6:	01 f5       	brne	.+64     	; 0xce8 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     ca8:	77 ff       	sbrs	r23, 7
     caa:	1d c0       	rjmp	.+58     	; 0xce6 <_ZN5Print5printEli+0x7a>
     cac:	6a 01       	movw	r12, r20
     cae:	7b 01       	movw	r14, r22
     cb0:	ec 01       	movw	r28, r24
      int t = print('-');
     cb2:	6d e2       	ldi	r22, 0x2D	; 45
     cb4:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN5Print5printEc>
     cb8:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     cba:	44 27       	eor	r20, r20
     cbc:	55 27       	eor	r21, r21
     cbe:	ba 01       	movw	r22, r20
     cc0:	4c 19       	sub	r20, r12
     cc2:	5d 09       	sbc	r21, r13
     cc4:	6e 09       	sbc	r22, r14
     cc6:	7f 09       	sbc	r23, r15
     cc8:	2a e0       	ldi	r18, 0x0A	; 10
     cca:	ce 01       	movw	r24, r28
     ccc:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN5Print11printNumberEmh>
     cd0:	80 0f       	add	r24, r16
     cd2:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	df 90       	pop	r13
     ce2:	cf 90       	pop	r12
     ce4:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     ce6:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     cf8:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <_ZN5Print11printNumberEmh>

00000cfc <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     cfc:	9a 01       	movw	r18, r20
  return print((long) n, base);
     cfe:	ab 01       	movw	r20, r22
     d00:	77 0f       	add	r23, r23
     d02:	66 0b       	sbc	r22, r22
     d04:	77 0b       	sbc	r23, r23
     d06:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <_ZN5Print5printEli>

00000d0a <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     d14:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN5Print5printEii>
     d18:	8c 01       	movw	r16, r24
  n += println();
     d1a:	ce 01       	movw	r24, r28
     d1c:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN5Print7printlnEv>
  return n;
}
     d20:	80 0f       	add	r24, r16
     d22:	91 1f       	adc	r25, r17
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	08 95       	ret

00000d2e <__vector_16>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	0f 92       	push	r0
     d36:	11 24       	eor	r1, r1
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25
     d40:	af 93       	push	r26
     d42:	bf 93       	push	r27
     d44:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <timer0_millis>
     d48:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <timer0_millis+0x1>
     d4c:	a0 91 b4 02 	lds	r26, 0x02B4	; 0x8002b4 <timer0_millis+0x2>
     d50:	b0 91 b5 02 	lds	r27, 0x02B5	; 0x8002b5 <timer0_millis+0x3>
     d54:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <timer0_fract>
     d58:	23 e0       	ldi	r18, 0x03	; 3
     d5a:	23 0f       	add	r18, r19
     d5c:	2d 37       	cpi	r18, 0x7D	; 125
     d5e:	20 f4       	brcc	.+8      	; 0xd68 <__vector_16+0x3a>
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	a1 1d       	adc	r26, r1
     d64:	b1 1d       	adc	r27, r1
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <__vector_16+0x44>
     d68:	26 e8       	ldi	r18, 0x86	; 134
     d6a:	23 0f       	add	r18, r19
     d6c:	02 96       	adiw	r24, 0x02	; 2
     d6e:	a1 1d       	adc	r26, r1
     d70:	b1 1d       	adc	r27, r1
     d72:	20 93 b1 02 	sts	0x02B1, r18	; 0x8002b1 <timer0_fract>
     d76:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <timer0_millis>
     d7a:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <timer0_millis+0x1>
     d7e:	a0 93 b4 02 	sts	0x02B4, r26	; 0x8002b4 <timer0_millis+0x2>
     d82:	b0 93 b5 02 	sts	0x02B5, r27	; 0x8002b5 <timer0_millis+0x3>
     d86:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <timer0_overflow_count>
     d8a:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <timer0_overflow_count+0x1>
     d8e:	a0 91 b8 02 	lds	r26, 0x02B8	; 0x8002b8 <timer0_overflow_count+0x2>
     d92:	b0 91 b9 02 	lds	r27, 0x02B9	; 0x8002b9 <timer0_overflow_count+0x3>
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	a1 1d       	adc	r26, r1
     d9a:	b1 1d       	adc	r27, r1
     d9c:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <timer0_overflow_count>
     da0:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <timer0_overflow_count+0x1>
     da4:	a0 93 b8 02 	sts	0x02B8, r26	; 0x8002b8 <timer0_overflow_count+0x2>
     da8:	b0 93 b9 02 	sts	0x02B9, r27	; 0x8002b9 <timer0_overflow_count+0x3>
     dac:	bf 91       	pop	r27
     dae:	af 91       	pop	r26
     db0:	9f 91       	pop	r25
     db2:	8f 91       	pop	r24
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     dc2:	82 30       	cpi	r24, 0x02	; 2
     dc4:	91 05       	cpc	r25, r1
     dc6:	38 f0       	brcs	.+14     	; 0xdd6 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     dd0:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <delayMicroseconds+0x10>
     dd6:	08 95       	ret

00000dd8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     dd8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     dda:	84 b5       	in	r24, 0x24	; 36
     ddc:	82 60       	ori	r24, 0x02	; 2
     dde:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     de0:	84 b5       	in	r24, 0x24	; 36
     de2:	81 60       	ori	r24, 0x01	; 1
     de4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     de6:	85 b5       	in	r24, 0x25	; 37
     de8:	82 60       	ori	r24, 0x02	; 2
     dea:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     dec:	85 b5       	in	r24, 0x25	; 37
     dee:	81 60       	ori	r24, 0x01	; 1
     df0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     df2:	ee e6       	ldi	r30, 0x6E	; 110
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	81 60       	ori	r24, 0x01	; 1
     dfa:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     dfc:	e1 e8       	ldi	r30, 0x81	; 129
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     e02:	80 81       	ld	r24, Z
     e04:	82 60       	ori	r24, 0x02	; 2
     e06:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     e08:	80 81       	ld	r24, Z
     e0a:	81 60       	ori	r24, 0x01	; 1
     e0c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     e0e:	e0 e8       	ldi	r30, 0x80	; 128
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	81 60       	ori	r24, 0x01	; 1
     e16:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     e18:	e1 eb       	ldi	r30, 0xB1	; 177
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	84 60       	ori	r24, 0x04	; 4
     e20:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     e22:	e0 eb       	ldi	r30, 0xB0	; 176
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	81 60       	ori	r24, 0x01	; 1
     e2a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     e2c:	ea e7       	ldi	r30, 0x7A	; 122
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	84 60       	ori	r24, 0x04	; 4
     e34:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     e36:	80 81       	ld	r24, Z
     e38:	82 60       	ori	r24, 0x02	; 2
     e3a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     e3c:	80 81       	ld	r24, Z
     e3e:	81 60       	ori	r24, 0x01	; 1
     e40:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     e42:	80 81       	ld	r24, Z
     e44:	80 68       	ori	r24, 0x80	; 128
     e46:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     e48:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     e4c:	08 95       	ret

00000e4e <_ZN6CC1101C1Ev>:
 */
void CC1101::wakeUp(void)
{
  cc1101_Select();                      // Select CC1101
  wait_Miso();                          // Wait until MISO goes low
  cc1101_Deselect();                    // Deselect CC1101
     e4e:	fc 01       	movw	r30, r24
     e50:	13 82       	std	Z+3, r1	; 0x03
     e52:	15 82       	std	Z+5, r1	; 0x05
     e54:	85 eb       	ldi	r24, 0xB5	; 181
     e56:	86 83       	std	Z+6, r24	; 0x06
     e58:	87 e4       	ldi	r24, 0x47	; 71
     e5a:	87 83       	std	Z+7, r24	; 0x07
     e5c:	8f ef       	ldi	r24, 0xFF	; 255
     e5e:	80 87       	std	Z+8, r24	; 0x08
     e60:	11 82       	std	Z+1, r1	; 0x01
     e62:	08 95       	ret

00000e64 <_ZN6CC11018writeRegEhh>:
 * 
 * 'regAddr'	Register address
 * 'value'	Value to be writen
 */
void CC1101::writeReg(byte regAddr, byte value) 
{
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	ec 01       	movw	r28, r24
     e6c:	14 2f       	mov	r17, r20
  cc1101_Select();                      // Select CC1101
     e6e:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
     e70:	1c 99       	sbic	0x03, 4	; 3
     e72:	fe cf       	rjmp	.-4      	; 0xe70 <_ZN6CC11018writeRegEhh+0xc>
  spi.send(regAddr);                    // Send register address
     e74:	ce 01       	movw	r24, r28
     e76:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN9SIMPLESPI4sendEh>
  spi.send(value);                      // Send value
     e7a:	61 2f       	mov	r22, r17
     e7c:	ce 01       	movw	r24, r28
     e7e:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN9SIMPLESPI4sendEh>
  cc1101_Deselect();                    // Deselect CC1101
     e82:	2a 9a       	sbi	0x05, 2	; 5
}
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	08 95       	ret

00000e8c <_ZN6CC110113writeBurstRegEhPhh>:
 * 'regAddr'	Register address
 * 'buffer'	Data to be writen
 * 'len'	Data length
 */
void CC1101::writeBurstReg(byte regAddr, byte* buffer, byte len)
{
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	8c 01       	movw	r16, r24
     e9c:	d4 2e       	mov	r13, r20
     e9e:	e5 2e       	mov	r14, r21
     ea0:	f2 2e       	mov	r15, r18
  byte addr, i;
  
  addr = regAddr | WRITE_BURST;         // Enable burst transfer
     ea2:	60 64       	ori	r22, 0x40	; 64
  cc1101_Select();                      // Select CC1101
     ea4:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
     ea6:	1c 99       	sbic	0x03, 4	; 3
     ea8:	fe cf       	rjmp	.-4      	; 0xea6 <_ZN6CC110113writeBurstRegEhPhh+0x1a>
  spi.send(addr);                       // Send register address
     eaa:	c8 01       	movw	r24, r16
     eac:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN9SIMPLESPI4sendEh>
     eb0:	cd 2d       	mov	r28, r13
     eb2:	de 2d       	mov	r29, r14
     eb4:	ce 01       	movw	r24, r28
     eb6:	8f 0d       	add	r24, r15
     eb8:	91 1d       	adc	r25, r1
     eba:	7c 01       	movw	r14, r24
  
  for(i=0 ; i<len ; i++)
     ebc:	ce 15       	cp	r28, r14
     ebe:	df 05       	cpc	r29, r15
     ec0:	29 f0       	breq	.+10     	; 0xecc <_ZN6CC110113writeBurstRegEhPhh+0x40>
    spi.send(buffer[i]);                // Send value
     ec2:	69 91       	ld	r22, Y+
     ec4:	c8 01       	movw	r24, r16
     ec6:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN9SIMPLESPI4sendEh>
  addr = regAddr | WRITE_BURST;         // Enable burst transfer
  cc1101_Select();                      // Select CC1101
  wait_Miso();                          // Wait until MISO goes low
  spi.send(addr);                       // Send register address
  
  for(i=0 ; i<len ; i++)
     eca:	f8 cf       	rjmp	.-16     	; 0xebc <_ZN6CC110113writeBurstRegEhPhh+0x30>
    spi.send(buffer[i]);                // Send value

  cc1101_Deselect();                    // Deselect CC1101  
     ecc:	2a 9a       	sbi	0x05, 2	; 5
}
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	ef 90       	pop	r14
     eda:	df 90       	pop	r13
     edc:	08 95       	ret

00000ede <_ZN6CC11019cmdStrobeEh>:
 * 
 * 'cmd'	Command strobe
 */     
void CC1101::cmdStrobe(byte cmd) 
{
  cc1101_Select();                      // Select CC1101
     ede:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
     ee0:	1c 99       	sbic	0x03, 4	; 3
     ee2:	fe cf       	rjmp	.-4      	; 0xee0 <_ZN6CC11019cmdStrobeEh+0x2>
  spi.send(cmd);                        // Send strobe command
     ee4:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN9SIMPLESPI4sendEh>
  cc1101_Deselect();                    // Deselect CC1101
     ee8:	2a 9a       	sbi	0x05, 2	; 5
     eea:	08 95       	ret

00000eec <_ZN6CC11017readRegEhh>:
 * 
 * Return:
 * 	Data byte returned by the CC1101 IC
 */
byte CC1101::readReg(byte regAddr, byte regType)
{
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	ec 01       	movw	r28, r24
  byte addr, val;

  addr = regAddr | regType;
     ef2:	64 2b       	or	r22, r20
  cc1101_Select();                      // Select CC1101
     ef4:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
     ef6:	1c 99       	sbic	0x03, 4	; 3
     ef8:	fe cf       	rjmp	.-4      	; 0xef6 <_ZN6CC11017readRegEhh+0xa>
  spi.send(addr);                       // Send register address
     efa:	ce 01       	movw	r24, r28
     efc:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN9SIMPLESPI4sendEh>
  val = spi.send(0x00);                 // Read result
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	ce 01       	movw	r24, r28
     f04:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN9SIMPLESPI4sendEh>
  cc1101_Deselect();                    // Deselect CC1101
     f08:	2a 9a       	sbi	0x05, 2	; 5

  return val;
}
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	08 95       	ret

00000f10 <_ZN6CC110112readBurstRegEPhhh>:
 * 'buffer'	Buffer where to copy the result to
 * 'regAddr'	Register address
 * 'len'	Data length
 */
void CC1101::readBurstReg(byte * buffer, byte regAddr, byte len) 
{
     f10:	df 92       	push	r13
     f12:	ef 92       	push	r14
     f14:	ff 92       	push	r15
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	8c 01       	movw	r16, r24
     f20:	d6 2e       	mov	r13, r22
     f22:	e7 2e       	mov	r14, r23
     f24:	f2 2e       	mov	r15, r18
  byte addr, i;
  
  addr = regAddr | READ_BURST;
     f26:	64 2f       	mov	r22, r20
     f28:	60 6c       	ori	r22, 0xC0	; 192
  cc1101_Select();                      // Select CC1101
     f2a:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
     f2c:	1c 99       	sbic	0x03, 4	; 3
     f2e:	fe cf       	rjmp	.-4      	; 0xf2c <_ZN6CC110112readBurstRegEPhhh+0x1c>
  spi.send(addr);                       // Send register address
     f30:	c8 01       	movw	r24, r16
     f32:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN9SIMPLESPI4sendEh>
     f36:	cd 2d       	mov	r28, r13
     f38:	de 2d       	mov	r29, r14
     f3a:	ce 01       	movw	r24, r28
     f3c:	8f 0d       	add	r24, r15
     f3e:	91 1d       	adc	r25, r1
     f40:	7c 01       	movw	r14, r24
  for(i=0 ; i<len ; i++)
     f42:	ce 15       	cp	r28, r14
     f44:	df 05       	cpc	r29, r15
     f46:	31 f0       	breq	.+12     	; 0xf54 <_ZN6CC110112readBurstRegEPhhh+0x44>
    buffer[i] = spi.send(0x00);         // Read result byte by byte
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	c8 01       	movw	r24, r16
     f4c:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN9SIMPLESPI4sendEh>
     f50:	89 93       	st	Y+, r24
  
  addr = regAddr | READ_BURST;
  cc1101_Select();                      // Select CC1101
  wait_Miso();                          // Wait until MISO goes low
  spi.send(addr);                       // Send register address
  for(i=0 ; i<len ; i++)
     f52:	f7 cf       	rjmp	.-18     	; 0xf42 <_ZN6CC110112readBurstRegEPhhh+0x32>
    buffer[i] = spi.send(0x00);         // Read result byte by byte
  cc1101_Deselect();                    // Deselect CC1101
     f54:	2a 9a       	sbi	0x05, 2	; 5
}
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	df 90       	pop	r13
     f64:	08 95       	ret

00000f66 <_ZN6CC110111setSyncWordEhh>:
 * 
 * 'syncH'	Synchronization word - High byte
 * 'syncL'	Synchronization word - Low byte
 */
void CC1101::setSyncWord(uint8_t syncH, uint8_t syncL) 
{
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	ec 01       	movw	r28, r24
     f70:	06 2f       	mov	r16, r22
     f72:	14 2f       	mov	r17, r20
  writeReg(CC1101_SYNC1, syncH);
     f74:	46 2f       	mov	r20, r22
     f76:	64 e0       	ldi	r22, 0x04	; 4
     f78:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_SYNC0, syncL);
     f7c:	41 2f       	mov	r20, r17
     f7e:	65 e0       	ldi	r22, 0x05	; 5
     f80:	ce 01       	movw	r24, r28
     f82:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  syncWord[0] = syncH;
     f86:	0e 83       	std	Y+6, r16	; 0x06
  syncWord[1] = syncL;
     f88:	1f 83       	std	Y+7, r17	; 0x07
}
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	08 95       	ret

00000f94 <_ZN6CC110111setSyncWordEPh>:
 * 
 * 'syncH'	Synchronization word - pointer to 2-byte array
 */
void CC1101::setSyncWord(byte *sync) 
{
  CC1101::setSyncWord(sync[0], sync[1]);
     f94:	fb 01       	movw	r30, r22
     f96:	41 81       	ldd	r20, Z+1	; 0x01
     f98:	60 81       	ld	r22, Z
     f9a:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <_ZN6CC110111setSyncWordEhh>

00000f9e <_ZN6CC110113setDevAddressEh>:
 * Set device address
 * 
 * @param addr	Device address
 */
void CC1101::setDevAddress(byte addr) 
{
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	ec 01       	movw	r28, r24
     fa6:	16 2f       	mov	r17, r22
  writeReg(CC1101_ADDR, addr);
     fa8:	46 2f       	mov	r20, r22
     faa:	69 e0       	ldi	r22, 0x09	; 9
     fac:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  devAddress = addr;
     fb0:	18 87       	std	Y+8, r17	; 0x08
}
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	08 95       	ret

00000fba <_ZN6CC110110setChannelEh>:
 * Set frequency channel
 * 
 * 'chnl'	Frequency channel
 */
void CC1101::setChannel(byte chnl) 
{
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	ec 01       	movw	r28, r24
     fc2:	16 2f       	mov	r17, r22
  writeReg(CC1101_CHANNR,  chnl);
     fc4:	46 2f       	mov	r20, r22
     fc6:	6a e0       	ldi	r22, 0x0A	; 10
     fc8:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  channel = chnl;
     fcc:	1d 83       	std	Y+5, r17	; 0x05
}
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	08 95       	ret

00000fd6 <_ZN6CC110114setCarrierFreqEh>:
 * Set carrier frequency
 * 
 * 'freq'	New carrier frequency
 */
void CC1101::setCarrierFreq(byte freq)
{
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	ec 01       	movw	r28, r24
     fde:	16 2f       	mov	r17, r22
  switch(freq)
     fe0:	62 30       	cpi	r22, 0x02	; 2
     fe2:	79 f0       	breq	.+30     	; 0x1002 <_ZN6CC110114setCarrierFreqEh+0x2c>
     fe4:	63 30       	cpi	r22, 0x03	; 3
     fe6:	c1 f0       	breq	.+48     	; 0x1018 <_ZN6CC110114setCarrierFreqEh+0x42>
     fe8:	61 30       	cpi	r22, 0x01	; 1
     fea:	09 f5       	brne	.+66     	; 0x102e <_ZN6CC110114setCarrierFreqEh+0x58>
  {
    case CFREQ_915:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_915);
     fec:	42 e2       	ldi	r20, 0x22	; 34
     fee:	6d e0       	ldi	r22, 0x0D	; 13
     ff0:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_915);
     ff4:	41 eb       	ldi	r20, 0xB1	; 177
     ff6:	6e e0       	ldi	r22, 0x0E	; 14
     ff8:	ce 01       	movw	r24, r28
     ffa:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_915);
     ffe:	4b e3       	ldi	r20, 0x3B	; 59
    1000:	20 c0       	rjmp	.+64     	; 0x1042 <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    case CFREQ_433:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_433);
    1002:	40 e1       	ldi	r20, 0x10	; 16
    1004:	6d e0       	ldi	r22, 0x0D	; 13
    1006:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_433);
    100a:	47 ea       	ldi	r20, 0xA7	; 167
    100c:	6e e0       	ldi	r22, 0x0E	; 14
    100e:	ce 01       	movw	r24, r28
    1010:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_433);
    1014:	42 e6       	ldi	r20, 0x62	; 98
    1016:	15 c0       	rjmp	.+42     	; 0x1042 <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    case CFREQ_918:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_918);
    1018:	43 e2       	ldi	r20, 0x23	; 35
    101a:	6d e0       	ldi	r22, 0x0D	; 13
    101c:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_918);
    1020:	4e e4       	ldi	r20, 0x4E	; 78
    1022:	6e e0       	ldi	r22, 0x0E	; 14
    1024:	ce 01       	movw	r24, r28
    1026:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_918);
    102a:	44 ec       	ldi	r20, 0xC4	; 196
    102c:	0a c0       	rjmp	.+20     	; 0x1042 <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    default:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_868);
    102e:	41 e2       	ldi	r20, 0x21	; 33
    1030:	6d e0       	ldi	r22, 0x0D	; 13
    1032:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_868);
    1036:	42 e6       	ldi	r20, 0x62	; 98
    1038:	6e e0       	ldi	r22, 0x0E	; 14
    103a:	ce 01       	movw	r24, r28
    103c:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_868);
    1040:	46 e7       	ldi	r20, 0x76	; 118
    1042:	6f e0       	ldi	r22, 0x0F	; 15
    1044:	ce 01       	movw	r24, r28
    1046:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
      break;
  }
   
  carrierFreq = freq;  
    104a:	1b 83       	std	Y+3, r17	; 0x03
}
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	08 95       	ret

00001054 <_ZN6CC11018enablePAEv>:
 *
 * Enable PA and disable LNA on the LD-Board
 */
void CC1101::enablePA(void)
{
 digitalWrite(PA_EN, HIGH);
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	83 e0       	ldi	r24, 0x03	; 3
    1058:	0e 94 af 0c 	call	0x195e	; 0x195e <digitalWrite>
 digitalWrite(LNA_EN, LOW);
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	84 e0       	ldi	r24, 0x04	; 4
    1060:	0c 94 af 0c 	jmp	0x195e	; 0x195e <digitalWrite>

00001064 <_ZN6CC110110setTxStateEv>:
 * setTxState
 * 
 * Enter Tx state
 */
void CC1101::setTxState(void)
{
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	ec 01       	movw	r28, r24
  // Enable PA on LD-board if any
  if (hgmEnabled)
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	88 23       	and	r24, r24
    106e:	19 f0       	breq	.+6      	; 0x1076 <_ZN6CC110110setTxStateEv+0x12>
    enablePA();
    1070:	ce 01       	movw	r24, r28
    1072:	0e 94 2a 08 	call	0x1054	; 0x1054 <_ZN6CC11018enablePAEv>

  cmdStrobe(CC1101_STX);
    1076:	65 e3       	ldi	r22, 0x35	; 53
    1078:	ce 01       	movw	r24, r28
    107a:	0e 94 6f 07 	call	0xede	; 0xede <_ZN6CC11019cmdStrobeEh>
  rfState = RFSTATE_TX;
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	8a 83       	std	Y+2, r24	; 0x02
}
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <_ZN6CC11019enableLNAEv>:
 *
 * Enable LNA and disable PA on the LD-Board
 */
void CC1101::enableLNA(void)
{
 digitalWrite(LNA_EN, HIGH);
    1088:	61 e0       	ldi	r22, 0x01	; 1
    108a:	84 e0       	ldi	r24, 0x04	; 4
    108c:	0e 94 af 0c 	call	0x195e	; 0x195e <digitalWrite>
 digitalWrite(PA_EN, LOW);
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	83 e0       	ldi	r24, 0x03	; 3
    1094:	0c 94 af 0c 	jmp	0x195e	; 0x195e <digitalWrite>

00001098 <_ZN6CC110110setRxStateEv>:
 * setRxState
 * 
 * Enter Rx state
 */
void CC1101::setRxState(void)
{
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
  cmdStrobe(CC1101_SRX);
    109e:	64 e3       	ldi	r22, 0x34	; 52
    10a0:	0e 94 6f 07 	call	0xede	; 0xede <_ZN6CC11019cmdStrobeEh>
  rfState = RFSTATE_RX;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	8a 83       	std	Y+2, r24	; 0x02

  // Enable LNA on LD-board if any
  if (hgmEnabled)
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	88 23       	and	r24, r24
    10ac:	29 f0       	breq	.+10     	; 0x10b8 <_ZN6CC110110setRxStateEv+0x20>
    enableLNA();
    10ae:	ce 01       	movw	r24, r28
}
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
  cmdStrobe(CC1101_SRX);
  rfState = RFSTATE_RX;

  // Enable LNA on LD-board if any
  if (hgmEnabled)
    enableLNA();
    10b4:	0c 94 44 08 	jmp	0x1088	; 0x1088 <_ZN6CC11019enableLNAEv>
}
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	08 95       	ret

000010be <_ZN6CC11018sendDataE8CCPACKET>:
 *  Return:
 *    True if the transmission succeeds
 *    False otherwise
 */
bool CC1101::sendData(CCPACKET packet)
{
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	8c 01       	movw	r16, r24
  byte marcState;
  bool res = false;
 
  // Declare to be in Tx state. This will avoid receiving packets whilst
  // transmitting
  rfState = RFSTATE_TX;
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	f8 01       	movw	r30, r16
    10d2:	82 83       	std	Z+2, r24	; 0x02

  // Enter RX state
  setRxState();
    10d4:	c8 01       	movw	r24, r16
    10d6:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN6CC110110setRxStateEv>

  // Check that the RX state has been entered
  while (((marcState = readStatusReg(CC1101_MARCSTATE)) & 0x1F) != 0x0D)
    10da:	40 ec       	ldi	r20, 0xC0	; 192
    10dc:	65 e3       	ldi	r22, 0x35	; 53
    10de:	c8 01       	movw	r24, r16
    10e0:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN6CC11017readRegEhh>
    10e4:	98 2f       	mov	r25, r24
    10e6:	9f 71       	andi	r25, 0x1F	; 31
    10e8:	9d 30       	cpi	r25, 0x0D	; 13
    10ea:	39 f0       	breq	.+14     	; 0x10fa <_ZN6CC11018sendDataE8CCPACKET+0x3c>
  {
    if (marcState == 0x11)        // RX_OVERFLOW
    10ec:	81 31       	cpi	r24, 0x11	; 17
    10ee:	a9 f7       	brne	.-22     	; 0x10da <_ZN6CC11018sendDataE8CCPACKET+0x1c>
      flushRxFifo();              // flush receive queue
    10f0:	6a e3       	ldi	r22, 0x3A	; 58
    10f2:	c8 01       	movw	r24, r16
    10f4:	0e 94 6f 07 	call	0xede	; 0xede <_ZN6CC11019cmdStrobeEh>
    10f8:	f0 cf       	rjmp	.-32     	; 0x10da <_ZN6CC11018sendDataE8CCPACKET+0x1c>
  }

  delayMicroseconds(500);
    10fa:	84 ef       	ldi	r24, 0xF4	; 244
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <delayMicroseconds>

  if (packet.length > 0)
    1102:	48 85       	ldd	r20, Y+8	; 0x08
    1104:	44 23       	and	r20, r20
    1106:	79 f0       	breq	.+30     	; 0x1126 <_ZN6CC11018sendDataE8CCPACKET+0x68>
  {
    // Set data length at the first position of the TX FIFO
    writeReg(CC1101_TXFIFO,  packet.length);
    1108:	6f e3       	ldi	r22, 0x3F	; 63
    110a:	c8 01       	movw	r24, r16
    110c:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
    // Write data into the TX FIFO
    writeBurstReg(CC1101_TXFIFO, packet.data, packet.length);
    1110:	28 85       	ldd	r18, Y+8	; 0x08
    1112:	ae 01       	movw	r20, r28
    1114:	47 5f       	subi	r20, 0xF7	; 247
    1116:	5f 4f       	sbci	r21, 0xFF	; 255
    1118:	6f e3       	ldi	r22, 0x3F	; 63
    111a:	c8 01       	movw	r24, r16
    111c:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN6CC110113writeBurstRegEhPhh>

    // CCA enabled: will enter TX state only if the channel is clear
    setTxState();
    1120:	c8 01       	movw	r24, r16
    1122:	0e 94 32 08 	call	0x1064	; 0x1064 <_ZN6CC110110setTxStateEv>
  }

  // Check that TX state is being entered (state = RXTX_SETTLING)
  marcState = readStatusReg(CC1101_MARCSTATE) & 0x1F;
    1126:	40 ec       	ldi	r20, 0xC0	; 192
    1128:	65 e3       	ldi	r22, 0x35	; 53
    112a:	c8 01       	movw	r24, r16
    112c:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN6CC11017readRegEhh>
  if((marcState != 0x13) && (marcState != 0x14) && (marcState != 0x15))
    1130:	8f 71       	andi	r24, 0x1F	; 31
    1132:	83 51       	subi	r24, 0x13	; 19
    1134:	83 30       	cpi	r24, 0x03	; 3
    1136:	80 f0       	brcs	.+32     	; 0x1158 <_ZN6CC11018sendDataE8CCPACKET+0x9a>
  {
    setIdleState();       // Enter IDLE state
    1138:	66 e3       	ldi	r22, 0x36	; 54
    113a:	c8 01       	movw	r24, r16
    113c:	0e 94 6f 07 	call	0xede	; 0xede <_ZN6CC11019cmdStrobeEh>
    flushTxFifo();        // Flush Tx FIFO
    1140:	6b e3       	ldi	r22, 0x3B	; 59
    1142:	c8 01       	movw	r24, r16
    1144:	0e 94 6f 07 	call	0xede	; 0xede <_ZN6CC11019cmdStrobeEh>
    setRxState();         // Back to RX state
    1148:	c8 01       	movw	r24, r16
    114a:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN6CC110110setRxStateEv>

    // Declare to be in Rx state
    rfState = RFSTATE_RX;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	f8 01       	movw	r30, r16
    1152:	82 83       	std	Z+2, r24	; 0x02
    return false;
    1154:	f1 2c       	mov	r15, r1
    1156:	1c c0       	rjmp	.+56     	; 0x1190 <_ZN6CC11018sendDataE8CCPACKET+0xd2>
  }

  // Wait for the sync word to be transmitted
  wait_GDO0_high();
    1158:	4a 9b       	sbis	0x09, 2	; 9
    115a:	fe cf       	rjmp	.-4      	; 0x1158 <_ZN6CC11018sendDataE8CCPACKET+0x9a>

  // Wait until the end of the packet transmission
  wait_GDO0_low();
    115c:	4a 99       	sbic	0x09, 2	; 9
    115e:	fe cf       	rjmp	.-4      	; 0x115c <_ZN6CC11018sendDataE8CCPACKET+0x9e>

  // Check that the TX FIFO is empty
  if((readStatusReg(CC1101_TXBYTES) & 0x7F) == 0)
    1160:	40 ec       	ldi	r20, 0xC0	; 192
    1162:	6a e3       	ldi	r22, 0x3A	; 58
    1164:	c8 01       	movw	r24, r16
    1166:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN6CC11017readRegEhh>
    116a:	8f 77       	andi	r24, 0x7F	; 127
    116c:	ff 24       	eor	r15, r15
    116e:	f3 94       	inc	r15
    1170:	81 11       	cpse	r24, r1
    1172:	f1 2c       	mov	r15, r1
    res = true;

  setIdleState();       // Enter IDLE state
    1174:	66 e3       	ldi	r22, 0x36	; 54
    1176:	c8 01       	movw	r24, r16
    1178:	0e 94 6f 07 	call	0xede	; 0xede <_ZN6CC11019cmdStrobeEh>
  flushTxFifo();        // Flush Tx FIFO
    117c:	6b e3       	ldi	r22, 0x3B	; 59
    117e:	c8 01       	movw	r24, r16
    1180:	0e 94 6f 07 	call	0xede	; 0xede <_ZN6CC11019cmdStrobeEh>

  // Enter back into RX state
  setRxState();
    1184:	c8 01       	movw	r24, r16
    1186:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN6CC110110setRxStateEv>

  // Declare to be in Rx state
  rfState = RFSTATE_RX;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	f8 01       	movw	r30, r16
    118e:	82 83       	std	Z+2, r24	; 0x02

  return res;
}
    1190:	8f 2d       	mov	r24, r15
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	ff 90       	pop	r15
    119c:	08 95       	ret

0000119e <_ZN6CC11019setCCregsEv>:
 * setCCregs
 * 
 * Configure CC1101 registers
 */
void CC1101::setCCregs(void) 
{
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	c1 54       	subi	r28, 0x41	; 65
    11ac:	d1 09       	sbc	r29, r1
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	8c 01       	movw	r16, r24
  writeReg(CC1101_IOCFG2,  CC1101_DEFVAL_IOCFG2);
    11ba:	4e e2       	ldi	r20, 0x2E	; 46
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_IOCFG1,  CC1101_DEFVAL_IOCFG1);
    11c2:	4e e2       	ldi	r20, 0x2E	; 46
    11c4:	61 e0       	ldi	r22, 0x01	; 1
    11c6:	c8 01       	movw	r24, r16
    11c8:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_IOCFG0,  CC1101_DEFVAL_IOCFG0);
    11cc:	46 e0       	ldi	r20, 0x06	; 6
    11ce:	62 e0       	ldi	r22, 0x02	; 2
    11d0:	c8 01       	movw	r24, r16
    11d2:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FIFOTHR,  CC1101_DEFVAL_FIFOTHR);
    11d6:	47 e0       	ldi	r20, 0x07	; 7
    11d8:	63 e0       	ldi	r22, 0x03	; 3
    11da:	c8 01       	movw	r24, r16
    11dc:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTLEN,  CC1101_DEFVAL_PKTLEN);
    11e0:	4d e3       	ldi	r20, 0x3D	; 61
    11e2:	66 e0       	ldi	r22, 0x06	; 6
    11e4:	c8 01       	movw	r24, r16
    11e6:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTCTRL1,  CC1101_DEFVAL_PKTCTRL1);
    11ea:	46 e0       	ldi	r20, 0x06	; 6
    11ec:	67 e0       	ldi	r22, 0x07	; 7
    11ee:	c8 01       	movw	r24, r16
    11f0:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTCTRL0,  CC1101_DEFVAL_PKTCTRL0);
    11f4:	45 e0       	ldi	r20, 0x05	; 5
    11f6:	68 e0       	ldi	r22, 0x08	; 8
    11f8:	c8 01       	movw	r24, r16
    11fa:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>

  // Set default synchronization word
  setSyncWord(syncWord);
    11fe:	b8 01       	movw	r22, r16
    1200:	6a 5f       	subi	r22, 0xFA	; 250
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	c8 01       	movw	r24, r16
    1206:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN6CC110111setSyncWordEPh>

  // Set default device address
  setDevAddress(devAddress);
    120a:	f8 01       	movw	r30, r16
    120c:	60 85       	ldd	r22, Z+8	; 0x08
    120e:	c8 01       	movw	r24, r16
    1210:	0e 94 cf 07 	call	0xf9e	; 0xf9e <_ZN6CC110113setDevAddressEh>

  // Set default frequency channel
  setChannel(channel);
    1214:	f8 01       	movw	r30, r16
    1216:	65 81       	ldd	r22, Z+5	; 0x05
    1218:	c8 01       	movw	r24, r16
    121a:	0e 94 dd 07 	call	0xfba	; 0xfba <_ZN6CC110110setChannelEh>
  
  writeReg(CC1101_FSCTRL1,  CC1101_DEFVAL_FSCTRL1);
    121e:	48 e0       	ldi	r20, 0x08	; 8
    1220:	6b e0       	ldi	r22, 0x0B	; 11
    1222:	c8 01       	movw	r24, r16
    1224:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCTRL0,  CC1101_DEFVAL_FSCTRL0);
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	6c e0       	ldi	r22, 0x0C	; 12
    122c:	c8 01       	movw	r24, r16
    122e:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>

  // Set default carrier frequency = 868 MHz
  setCarrierFreq(carrierFreq);
    1232:	f8 01       	movw	r30, r16
    1234:	63 81       	ldd	r22, Z+3	; 0x03
    1236:	c8 01       	movw	r24, r16
    1238:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <_ZN6CC110114setCarrierFreqEh>

  // RF speed
  if (workMode == MODE_LOW_SPEED)
    123c:	f8 01       	movw	r30, r16
    123e:	84 81       	ldd	r24, Z+4	; 0x04
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	11 f4       	brne	.+4      	; 0x1248 <_ZN6CC11019setCCregsEv+0xaa>
    writeReg(CC1101_MDMCFG4,  CC1101_DEFVAL_MDMCFG4_4800);
    1244:	47 ec       	ldi	r20, 0xC7	; 199
    1246:	01 c0       	rjmp	.+2      	; 0x124a <_ZN6CC11019setCCregsEv+0xac>
  else
    writeReg(CC1101_MDMCFG4,  CC1101_DEFVAL_MDMCFG4_38400);
    1248:	4a ec       	ldi	r20, 0xCA	; 202
    124a:	60 e1       	ldi	r22, 0x10	; 16
    124c:	c8 01       	movw	r24, r16
    124e:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
    
  writeReg(CC1101_MDMCFG3,  CC1101_DEFVAL_MDMCFG3);
    1252:	43 e8       	ldi	r20, 0x83	; 131
    1254:	61 e1       	ldi	r22, 0x11	; 17
    1256:	c8 01       	movw	r24, r16
    1258:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG2,  CC1101_DEFVAL_MDMCFG2);
    125c:	43 e9       	ldi	r20, 0x93	; 147
    125e:	62 e1       	ldi	r22, 0x12	; 18
    1260:	c8 01       	movw	r24, r16
    1262:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG1,  CC1101_DEFVAL_MDMCFG1);
    1266:	42 e2       	ldi	r20, 0x22	; 34
    1268:	63 e1       	ldi	r22, 0x13	; 19
    126a:	c8 01       	movw	r24, r16
    126c:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG0,  CC1101_DEFVAL_MDMCFG0);
    1270:	48 ef       	ldi	r20, 0xF8	; 248
    1272:	64 e1       	ldi	r22, 0x14	; 20
    1274:	c8 01       	movw	r24, r16
    1276:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_DEVIATN,  CC1101_DEFVAL_DEVIATN);
    127a:	45 e3       	ldi	r20, 0x35	; 53
    127c:	65 e1       	ldi	r22, 0x15	; 21
    127e:	c8 01       	movw	r24, r16
    1280:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM2,  CC1101_DEFVAL_MCSM2);
    1284:	47 e0       	ldi	r20, 0x07	; 7
    1286:	66 e1       	ldi	r22, 0x16	; 22
    1288:	c8 01       	movw	r24, r16
    128a:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM1,  CC1101_DEFVAL_MCSM1);
    128e:	40 e2       	ldi	r20, 0x20	; 32
    1290:	67 e1       	ldi	r22, 0x17	; 23
    1292:	c8 01       	movw	r24, r16
    1294:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM0,  CC1101_DEFVAL_MCSM0);
    1298:	48 e1       	ldi	r20, 0x18	; 24
    129a:	68 e1       	ldi	r22, 0x18	; 24
    129c:	c8 01       	movw	r24, r16
    129e:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FOCCFG,  CC1101_DEFVAL_FOCCFG);
    12a2:	46 e1       	ldi	r20, 0x16	; 22
    12a4:	69 e1       	ldi	r22, 0x19	; 25
    12a6:	c8 01       	movw	r24, r16
    12a8:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_BSCFG,  CC1101_DEFVAL_BSCFG);
    12ac:	4c e6       	ldi	r20, 0x6C	; 108
    12ae:	6a e1       	ldi	r22, 0x1A	; 26
    12b0:	c8 01       	movw	r24, r16
    12b2:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL2,  CC1101_DEFVAL_AGCCTRL2);
    12b6:	43 e4       	ldi	r20, 0x43	; 67
    12b8:	6b e1       	ldi	r22, 0x1B	; 27
    12ba:	c8 01       	movw	r24, r16
    12bc:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL1,  CC1101_DEFVAL_AGCCTRL1);
    12c0:	40 e4       	ldi	r20, 0x40	; 64
    12c2:	6c e1       	ldi	r22, 0x1C	; 28
    12c4:	c8 01       	movw	r24, r16
    12c6:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL0,  CC1101_DEFVAL_AGCCTRL0);
    12ca:	41 e9       	ldi	r20, 0x91	; 145
    12cc:	6d e1       	ldi	r22, 0x1D	; 29
    12ce:	c8 01       	movw	r24, r16
    12d0:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WOREVT1,  CC1101_DEFVAL_WOREVT1);
    12d4:	47 e8       	ldi	r20, 0x87	; 135
    12d6:	6e e1       	ldi	r22, 0x1E	; 30
    12d8:	c8 01       	movw	r24, r16
    12da:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WOREVT0,  CC1101_DEFVAL_WOREVT0);
    12de:	4b e6       	ldi	r20, 0x6B	; 107
    12e0:	6f e1       	ldi	r22, 0x1F	; 31
    12e2:	c8 01       	movw	r24, r16
    12e4:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WORCTRL,  CC1101_DEFVAL_WORCTRL);
    12e8:	4b ef       	ldi	r20, 0xFB	; 251
    12ea:	60 e2       	ldi	r22, 0x20	; 32
    12ec:	c8 01       	movw	r24, r16
    12ee:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FREND1,  CC1101_DEFVAL_FREND1);
    12f2:	46 e5       	ldi	r20, 0x56	; 86
    12f4:	61 e2       	ldi	r22, 0x21	; 33
    12f6:	c8 01       	movw	r24, r16
    12f8:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FREND0,  CC1101_DEFVAL_FREND0);
    12fc:	40 e1       	ldi	r20, 0x10	; 16
    12fe:	62 e2       	ldi	r22, 0x22	; 34
    1300:	c8 01       	movw	r24, r16
    1302:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL3,  CC1101_DEFVAL_FSCAL3);
    1306:	49 ee       	ldi	r20, 0xE9	; 233
    1308:	63 e2       	ldi	r22, 0x23	; 35
    130a:	c8 01       	movw	r24, r16
    130c:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL2,  CC1101_DEFVAL_FSCAL2);
    1310:	4a e2       	ldi	r20, 0x2A	; 42
    1312:	64 e2       	ldi	r22, 0x24	; 36
    1314:	c8 01       	movw	r24, r16
    1316:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL1,  CC1101_DEFVAL_FSCAL1);
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	65 e2       	ldi	r22, 0x25	; 37
    131e:	c8 01       	movw	r24, r16
    1320:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL0,  CC1101_DEFVAL_FSCAL0);
    1324:	4f e1       	ldi	r20, 0x1F	; 31
    1326:	66 e2       	ldi	r22, 0x26	; 38
    1328:	c8 01       	movw	r24, r16
    132a:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_RCCTRL1,  CC1101_DEFVAL_RCCTRL1);
    132e:	41 e4       	ldi	r20, 0x41	; 65
    1330:	67 e2       	ldi	r22, 0x27	; 39
    1332:	c8 01       	movw	r24, r16
    1334:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_RCCTRL0,  CC1101_DEFVAL_RCCTRL0);
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	68 e2       	ldi	r22, 0x28	; 40
    133c:	c8 01       	movw	r24, r16
    133e:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSTEST,  CC1101_DEFVAL_FSTEST);
    1342:	49 e5       	ldi	r20, 0x59	; 89
    1344:	69 e2       	ldi	r22, 0x29	; 41
    1346:	c8 01       	movw	r24, r16
    1348:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PTEST,  CC1101_DEFVAL_PTEST);
    134c:	4f e7       	ldi	r20, 0x7F	; 127
    134e:	6a e2       	ldi	r22, 0x2A	; 42
    1350:	c8 01       	movw	r24, r16
    1352:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCTEST,  CC1101_DEFVAL_AGCTEST);
    1356:	4f e3       	ldi	r20, 0x3F	; 63
    1358:	6b e2       	ldi	r22, 0x2B	; 43
    135a:	c8 01       	movw	r24, r16
    135c:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST2,  CC1101_DEFVAL_TEST2);
    1360:	41 e8       	ldi	r20, 0x81	; 129
    1362:	6c e2       	ldi	r22, 0x2C	; 44
    1364:	c8 01       	movw	r24, r16
    1366:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST1,  CC1101_DEFVAL_TEST1);
    136a:	45 e3       	ldi	r20, 0x35	; 53
    136c:	6d e2       	ldi	r22, 0x2D	; 45
    136e:	c8 01       	movw	r24, r16
    1370:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST0,  CC1101_DEFVAL_TEST0);
    1374:	49 e0       	ldi	r20, 0x09	; 9
    1376:	6e e2       	ldi	r22, 0x2E	; 46
    1378:	c8 01       	movw	r24, r16
    137a:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>
  
  // Send empty packet
  CCPACKET packet;
  packet.length = 0;
    137e:	19 82       	std	Y+1, r1	; 0x01
  sendData(packet);
    1380:	8d b7       	in	r24, 0x3d	; 61
    1382:	9e b7       	in	r25, 0x3e	; 62
    1384:	81 54       	subi	r24, 0x41	; 65
    1386:	91 09       	sbc	r25, r1
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	9e bf       	out	0x3e, r25	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	8d bf       	out	0x3d, r24	; 61
    1392:	ad b7       	in	r26, 0x3d	; 61
    1394:	be b7       	in	r27, 0x3e	; 62
    1396:	11 96       	adiw	r26, 0x01	; 1
    1398:	81 e4       	ldi	r24, 0x41	; 65
    139a:	fe 01       	movw	r30, r28
    139c:	31 96       	adiw	r30, 0x01	; 1
    139e:	01 90       	ld	r0, Z+
    13a0:	0d 92       	st	X+, r0
    13a2:	8a 95       	dec	r24
    13a4:	e1 f7       	brne	.-8      	; 0x139e <_ZN6CC11019setCCregsEv+0x200>
    13a6:	c8 01       	movw	r24, r16
    13a8:	0e 94 5f 08 	call	0x10be	; 0x10be <_ZN6CC11018sendDataE8CCPACKET>
}
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	cf 5b       	subi	r28, 0xBF	; 191
    13b8:	df 4f       	sbci	r29, 0xFF	; 255
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	08 95       	ret

000013ce <_ZN6CC11015resetEv>:
 * reset
 * 
 * Reset CC1101
 */
void CC1101::reset(void) 
{
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	ec 01       	movw	r28, r24
  cc1101_Deselect();                    // Deselect CC1101
    13d4:	2a 9a       	sbi	0x05, 2	; 5
  delayMicroseconds(5);
    13d6:	85 e0       	ldi	r24, 0x05	; 5
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <delayMicroseconds>
  cc1101_Select();                      // Select CC1101
    13de:	2a 98       	cbi	0x05, 2	; 5
  delayMicroseconds(10);
    13e0:	8a e0       	ldi	r24, 0x0A	; 10
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <delayMicroseconds>
  cc1101_Deselect();                    // Deselect CC1101
    13e8:	2a 9a       	sbi	0x05, 2	; 5
  delayMicroseconds(41);
    13ea:	89 e2       	ldi	r24, 0x29	; 41
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <delayMicroseconds>
  cc1101_Select();                      // Select CC1101
    13f2:	2a 98       	cbi	0x05, 2	; 5

  wait_Miso();                          // Wait until MISO goes low
    13f4:	1c 99       	sbic	0x03, 4	; 3
    13f6:	fe cf       	rjmp	.-4      	; 0x13f4 <_ZN6CC11015resetEv+0x26>
  spi.send(CC1101_SRES);                // Send reset command strobe
    13f8:	60 e3       	ldi	r22, 0x30	; 48
    13fa:	ce 01       	movw	r24, r28
    13fc:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN9SIMPLESPI4sendEh>
  wait_Miso();                          // Wait until MISO goes low
    1400:	1c 99       	sbic	0x03, 4	; 3
    1402:	fe cf       	rjmp	.-4      	; 0x1400 <_ZN6CC11015resetEv+0x32>

  cc1101_Deselect();                    // Deselect CC1101
    1404:	2a 9a       	sbi	0x05, 2	; 5

  setCCregs();                          // Reconfigure CC1101
    1406:	ce 01       	movw	r24, r28
}
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
  spi.send(CC1101_SRES);                // Send reset command strobe
  wait_Miso();                          // Wait until MISO goes low

  cc1101_Deselect();                    // Deselect CC1101

  setCCregs();                          // Reconfigure CC1101
    140c:	0c 94 cf 08 	jmp	0x119e	; 0x119e <_ZN6CC11019setCCregsEv>

00001410 <_ZN6CC11014initEhh>:
 *
 * @param freq Carrier frequency
 * @param mode Working mode (speed, ...)
 */
void CC1101::init(uint8_t freq, uint8_t mode)
{
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	ec 01       	movw	r28, r24
  carrierFreq = freq;
    1416:	6b 83       	std	Y+3, r22	; 0x03
  workMode = mode;
    1418:	4c 83       	std	Y+4, r20	; 0x04
  
  spi.init();                           // Initialize SPI interface
    141a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN9SIMPLESPI4initEv>
  pinMode(GDO0, INPUT);                 // Config GDO0 as input
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	82 e0       	ldi	r24, 0x02	; 2
    1422:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <pinMode>

  reset();                              // Reset CC1101
    1426:	ce 01       	movw	r24, r28
    1428:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN6CC11015resetEv>
     * 
     * @param paLevel amplification value
     */
    inline void setTxPowerAmp(uint8_t paLevel)
    {
      writeReg(CC1101_PATABLE, paLevel);
    142c:	40 e6       	ldi	r20, 0x60	; 96
    142e:	6e e3       	ldi	r22, 0x3E	; 62
    1430:	ce 01       	movw	r24, r28

  // Configure PATABLE
  setTxPowerAmp(PA_LowPower);
}
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	0c 94 32 07 	jmp	0xe64	; 0xe64 <_ZN6CC11018writeRegEhh>

0000143a <_ZN6CC110111receiveDataEP8CCPACKET>:
 * 
 * Return:
 * 	Amount of bytes received
 */
byte CC1101::receiveData(CCPACKET * packet)
{
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	ec 01       	movw	r28, r24
    1444:	8b 01       	movw	r16, r22
  byte val;
  byte rxBytes = readStatusReg(CC1101_RXBYTES);
    1446:	40 ec       	ldi	r20, 0xC0	; 192
    1448:	6b e3       	ldi	r22, 0x3B	; 59
    144a:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN6CC11017readRegEhh>

  // Any byte waiting to be read and no overflow?
  if (rxBytes & 0x7F && !(rxBytes & 0x80))
    144e:	98 2f       	mov	r25, r24
    1450:	9f 77       	andi	r25, 0x7F	; 127
    1452:	59 f0       	breq	.+22     	; 0x146a <_ZN6CC110111receiveDataEP8CCPACKET+0x30>
    1454:	87 fd       	sbrc	r24, 7
    1456:	09 c0       	rjmp	.+18     	; 0x146a <_ZN6CC110111receiveDataEP8CCPACKET+0x30>
  {
    // Read data length
    packet->length = readConfigReg(CC1101_RXFIFO);
    1458:	40 e8       	ldi	r20, 0x80	; 128
    145a:	6f e3       	ldi	r22, 0x3F	; 63
    145c:	ce 01       	movw	r24, r28
    145e:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN6CC11017readRegEhh>
    1462:	f8 01       	movw	r30, r16
    1464:	80 83       	st	Z, r24
    // If packet is too long
    if (packet->length > CCPACKET_DATA_LEN)
    1466:	8e 33       	cpi	r24, 0x3E	; 62
    1468:	18 f0       	brcs	.+6      	; 0x1470 <_ZN6CC110111receiveDataEP8CCPACKET+0x36>
      packet->length = 0;   // Discard packet
    146a:	f8 01       	movw	r30, r16
    146c:	10 82       	st	Z, r1
    146e:	1f c0       	rjmp	.+62     	; 0x14ae <_ZN6CC110111receiveDataEP8CCPACKET+0x74>
    else
    {
      // Read data packet
      readBurstReg(packet->data, CC1101_RXFIFO, packet->length);
    1470:	28 2f       	mov	r18, r24
    1472:	4f e3       	ldi	r20, 0x3F	; 63
    1474:	b8 01       	movw	r22, r16
    1476:	6f 5f       	subi	r22, 0xFF	; 255
    1478:	7f 4f       	sbci	r23, 0xFF	; 255
    147a:	ce 01       	movw	r24, r28
    147c:	0e 94 88 07 	call	0xf10	; 0xf10 <_ZN6CC110112readBurstRegEPhhh>
      // Read RSSI
      packet->rssi = readConfigReg(CC1101_RXFIFO);
    1480:	40 e8       	ldi	r20, 0x80	; 128
    1482:	6f e3       	ldi	r22, 0x3F	; 63
    1484:	ce 01       	movw	r24, r28
    1486:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN6CC11017readRegEhh>
    148a:	f8 01       	movw	r30, r16
    148c:	87 af       	std	Z+63, r24	; 0x3f
      // Read LQI and CRC_OK
      val = readConfigReg(CC1101_RXFIFO);
    148e:	40 e8       	ldi	r20, 0x80	; 128
    1490:	6f e3       	ldi	r22, 0x3F	; 63
    1492:	ce 01       	movw	r24, r28
    1494:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN6CC11017readRegEhh>
      packet->lqi = val & 0x7F;
    1498:	f8 01       	movw	r30, r16
    149a:	e0 5c       	subi	r30, 0xC0	; 192
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	98 2f       	mov	r25, r24
    14a0:	9f 77       	andi	r25, 0x7F	; 127
    14a2:	90 83       	st	Z, r25
      packet->crc_ok = bitRead(val, 7);
    14a4:	88 1f       	adc	r24, r24
    14a6:	88 27       	eor	r24, r24
    14a8:	88 1f       	adc	r24, r24
    14aa:	f8 01       	movw	r30, r16
    14ac:	86 af       	std	Z+62, r24	; 0x3e
    }
  }
  else
    packet->length = 0;

  setIdleState();       // Enter IDLE state
    14ae:	66 e3       	ldi	r22, 0x36	; 54
    14b0:	ce 01       	movw	r24, r28
    14b2:	0e 94 6f 07 	call	0xede	; 0xede <_ZN6CC11019cmdStrobeEh>
  flushRxFifo();        // Flush Rx FIFO
    14b6:	6a e3       	ldi	r22, 0x3A	; 58
    14b8:	ce 01       	movw	r24, r28
    14ba:	0e 94 6f 07 	call	0xede	; 0xede <_ZN6CC11019cmdStrobeEh>
  //cmdStrobe(CC1101_SCAL);

  // Back to RX state
  setRxState();
    14be:	ce 01       	movw	r24, r28
    14c0:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN6CC110110setRxStateEv>

  return packet->length;
}
    14c4:	f8 01       	movw	r30, r16
    14c6:	80 81       	ld	r24, Z
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	08 95       	ret

000014d2 <_Z8radioISRv>:
  result = ADCL;
  result |= ADCH << 8;
  result = 1126400L / result; // Back-calculate AVcc in mV
  
  return result;
}
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <detachInterrupt>
    14d8:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <panstamp+0x3>
    14dc:	81 30       	cpi	r24, 0x01	; 1
    14de:	a9 f4       	brne	.+42     	; 0x150a <_Z8radioISRv+0x38>
    14e0:	6a eb       	ldi	r22, 0xBA	; 186
    14e2:	72 e0       	ldi	r23, 0x02	; 2
    14e4:	8c ef       	ldi	r24, 0xFC	; 252
    14e6:	92 e0       	ldi	r25, 0x02	; 2
    14e8:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN6CC110111receiveDataEP8CCPACKET>
    14ec:	88 23       	and	r24, r24
    14ee:	69 f0       	breq	.+26     	; 0x150a <_Z8radioISRv+0x38>
    14f0:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <_ZZ8radioISRvE8ccPacket+0x3e>
    14f4:	88 23       	and	r24, r24
    14f6:	49 f0       	breq	.+18     	; 0x150a <_Z8radioISRv+0x38>
    14f8:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <panstamp+0xb>
    14fc:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <panstamp+0xc>
    1500:	30 97       	sbiw	r30, 0x00	; 0
    1502:	19 f0       	breq	.+6      	; 0x150a <_Z8radioISRv+0x38>
    1504:	8a eb       	ldi	r24, 0xBA	; 186
    1506:	92 e0       	ldi	r25, 0x02	; 2
    1508:	09 95       	icall
    150a:	42 e0       	ldi	r20, 0x02	; 2
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	69 e6       	ldi	r22, 0x69	; 105
    1510:	7a e0       	ldi	r23, 0x0A	; 10
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <attachInterrupt>

00001518 <_ZN8PANSTAMPC1Ev>:
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	ec 01       	movw	r28, r24
    151e:	01 96       	adiw	r24, 0x01	; 1
    1520:	0e 94 27 07 	call	0xe4e	; 0xe4e <_ZN6CC1101C1Ev>
    1524:	1c 86       	std	Y+12, r1	; 0x0c
    1526:	1b 86       	std	Y+11, r1	; 0x0b
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	08 95       	ret

0000152e <_ZN8PANSTAMP4rxOnEv>:
    152e:	42 e0       	ldi	r20, 0x02	; 2
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	69 e6       	ldi	r22, 0x69	; 105
    1534:	7a e0       	ldi	r23, 0x0A	; 10
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <attachInterrupt>

0000153c <_ZN8PANSTAMP5rxOffEv>:
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <detachInterrupt>

00001542 <_ZN8PANSTAMP4initEhh>:
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	ec 01       	movw	r28, r24
    1550:	f6 2e       	mov	r15, r22
    1552:	e4 2e       	mov	r14, r20
    1554:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_Z14rcOscCalibratev>
    1558:	8e 01       	movw	r16, r28
    155a:	0f 5f       	subi	r16, 0xFF	; 255
    155c:	1f 4f       	sbci	r17, 0xFF	; 255
    155e:	4e 2d       	mov	r20, r14
    1560:	6f 2d       	mov	r22, r15
    1562:	c8 01       	movw	r24, r16
    1564:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN6CC11014initEhh>
    1568:	82 e3       	ldi	r24, 0x32	; 50
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <delayMicroseconds>
    1570:	c8 01       	movw	r24, r16
    1572:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN6CC110110setRxStateEv>
    1576:	42 e0       	ldi	r20, 0x02	; 2
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	69 e6       	ldi	r22, 0x69	; 105
    157c:	7a e0       	ldi	r23, 0x0A	; 10
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	0e 94 ca 0b 	call	0x1794	; 0x1794 <attachInterrupt>
    1584:	18 82       	st	Y, r1
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	ef 90       	pop	r14
    1592:	08 95       	ret

00001594 <_ZN8PANSTAMP5resetEv>:
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	a8 95       	wdr
    159a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    159e:	88 61       	ori	r24, 0x18	; 24
    15a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    15a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	98 e0       	ldi	r25, 0x08	; 8
    15ac:	88 e1       	ldi	r24, 0x18	; 24
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	a8 95       	wdr
    15b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    15be:	ff cf       	rjmp	.-2      	; 0x15be <_ZN8PANSTAMP5resetEv+0x2a>

000015c0 <_GLOBAL__sub_I__Z8radioISRv>:

/**
 * Pre-instantiate PANSTAMP object
 */
PANSTAMP panstamp;
    15c0:	8b ef       	ldi	r24, 0xFB	; 251
    15c2:	92 e0       	ldi	r25, 0x02	; 2
    15c4:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <_ZN8PANSTAMPC1Ev>

000015c8 <_ZN9SIMPLESPI4initEv>:
 * 
 * SPI initialization
 */
void SIMPLESPI::init() 
{
  digitalWrite(SPI_SS, HIGH);
    15c8:	61 e0       	ldi	r22, 0x01	; 1
    15ca:	8a e0       	ldi	r24, 0x0A	; 10
    15cc:	0e 94 af 0c 	call	0x195e	; 0x195e <digitalWrite>
  
  // Configure SPI pins
  pinMode(SPI_SS, OUTPUT);
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	8a e0       	ldi	r24, 0x0A	; 10
    15d4:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <pinMode>
  pinMode(SPI_MOSI, OUTPUT);
    15d8:	61 e0       	ldi	r22, 0x01	; 1
    15da:	8b e0       	ldi	r24, 0x0B	; 11
    15dc:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <pinMode>
  pinMode(SPI_MISO, INPUT);
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	8c e0       	ldi	r24, 0x0C	; 12
    15e4:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <pinMode>
  pinMode(SPI_SCK, OUTPUT);
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	8d e0       	ldi	r24, 0x0D	; 13
    15ec:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <pinMode>

  digitalWrite(SPI_SCK, HIGH);
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	8d e0       	ldi	r24, 0x0D	; 13
    15f4:	0e 94 af 0c 	call	0x195e	; 0x195e <digitalWrite>
  digitalWrite(SPI_MOSI, LOW);
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	8b e0       	ldi	r24, 0x0B	; 11
    15fc:	0e 94 af 0c 	call	0x195e	; 0x195e <digitalWrite>

  // SPI speed = clk/4
  SPCR = _BV(SPE) | _BV(MSTR);
    1600:	80 e5       	ldi	r24, 0x50	; 80
    1602:	8c bd       	out	0x2c, r24	; 44
    1604:	08 95       	ret

00001606 <_ZN9SIMPLESPI4sendEh>:
 * Return:
 * 	Response received from SPI slave
 */
byte SIMPLESPI::send(byte value) 
{
  SPDR = value;                          // Transfer byte via SPI
    1606:	6e bd       	out	0x2e, r22	; 46
  while(!(SPSR & _BV(SPIF)));            // Wait until SPI operation is terminated
    1608:	0d b4       	in	r0, 0x2d	; 45
    160a:	07 fe       	sbrs	r0, 7
    160c:	fd cf       	rjmp	.-6      	; 0x1608 <_ZN9SIMPLESPI4sendEh+0x2>

  return SPDR;
    160e:	8e b5       	in	r24, 0x2e	; 46
}
    1610:	08 95       	ret

00001612 <__vector_13>:
  else if(pin == 2 || pin == 10) {
    DDRB |= _BV(PORTB2);
    TCCR1A |= _BV(COM1B1);
  }
  setPwmDuty(pin, duty);
  resume();			// Lex - make sure the clock is running.  We don't want to restart the count, in case we are starting the second WGM
    1612:	1f 92       	push	r1
    1614:	0f 92       	push	r0
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	0f 92       	push	r0
    161a:	11 24       	eor	r1, r1
    161c:	2f 93       	push	r18
    161e:	3f 93       	push	r19
    1620:	4f 93       	push	r20
    1622:	5f 93       	push	r21
    1624:	6f 93       	push	r22
    1626:	7f 93       	push	r23
    1628:	8f 93       	push	r24
    162a:	9f 93       	push	r25
    162c:	af 93       	push	r26
    162e:	bf 93       	push	r27
    1630:	ef 93       	push	r30
    1632:	ff 93       	push	r31
    1634:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <Timer1+0x4>
    1638:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <Timer1+0x5>
    163c:	09 95       	icall
    163e:	ff 91       	pop	r31
    1640:	ef 91       	pop	r30
    1642:	bf 91       	pop	r27
    1644:	af 91       	pop	r26
    1646:	9f 91       	pop	r25
    1648:	8f 91       	pop	r24
    164a:	7f 91       	pop	r23
    164c:	6f 91       	pop	r22
    164e:	5f 91       	pop	r21
    1650:	4f 91       	pop	r20
    1652:	3f 91       	pop	r19
    1654:	2f 91       	pop	r18
    1656:	0f 90       	pop	r0
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	0f 90       	pop	r0
    165c:	1f 90       	pop	r1
    165e:	18 95       	reti

00001660 <_ZN8TimerOne9setPeriodEl>:
    1660:	fc 01       	movw	r30, r24
    1662:	a3 e0       	ldi	r26, 0x03	; 3
    1664:	44 0f       	add	r20, r20
    1666:	55 1f       	adc	r21, r21
    1668:	66 1f       	adc	r22, r22
    166a:	77 1f       	adc	r23, r23
    166c:	aa 95       	dec	r26
    166e:	d1 f7       	brne	.-12     	; 0x1664 <_ZN8TimerOne9setPeriodEl+0x4>
    1670:	41 15       	cp	r20, r1
    1672:	51 05       	cpc	r21, r1
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	68 07       	cpc	r22, r24
    1678:	71 05       	cpc	r23, r1
    167a:	14 f4       	brge	.+4      	; 0x1680 <_ZN8TimerOne9setPeriodEl+0x20>
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	0e c0       	rjmp	.+28     	; 0x169c <_ZN8TimerOne9setPeriodEl+0x3c>
    1680:	33 e0       	ldi	r19, 0x03	; 3
    1682:	75 95       	asr	r23
    1684:	67 95       	ror	r22
    1686:	57 95       	ror	r21
    1688:	47 95       	ror	r20
    168a:	3a 95       	dec	r19
    168c:	d1 f7       	brne	.-12     	; 0x1682 <_ZN8TimerOne9setPeriodEl+0x22>
    168e:	41 15       	cp	r20, r1
    1690:	51 05       	cpc	r21, r1
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	68 07       	cpc	r22, r24
    1696:	71 05       	cpc	r23, r1
    1698:	1c f4       	brge	.+6      	; 0x16a0 <_ZN8TimerOne9setPeriodEl+0x40>
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	82 83       	std	Z+2, r24	; 0x02
    169e:	31 c0       	rjmp	.+98     	; 0x1702 <_ZN8TimerOne9setPeriodEl+0xa2>
    16a0:	23 e0       	ldi	r18, 0x03	; 3
    16a2:	75 95       	asr	r23
    16a4:	67 95       	ror	r22
    16a6:	57 95       	ror	r21
    16a8:	47 95       	ror	r20
    16aa:	2a 95       	dec	r18
    16ac:	d1 f7       	brne	.-12     	; 0x16a2 <_ZN8TimerOne9setPeriodEl+0x42>
    16ae:	41 15       	cp	r20, r1
    16b0:	51 05       	cpc	r21, r1
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	68 07       	cpc	r22, r24
    16b6:	71 05       	cpc	r23, r1
    16b8:	14 f4       	brge	.+4      	; 0x16be <_ZN8TimerOne9setPeriodEl+0x5e>
    16ba:	83 e0       	ldi	r24, 0x03	; 3
    16bc:	ef cf       	rjmp	.-34     	; 0x169c <_ZN8TimerOne9setPeriodEl+0x3c>
    16be:	92 e0       	ldi	r25, 0x02	; 2
    16c0:	75 95       	asr	r23
    16c2:	67 95       	ror	r22
    16c4:	57 95       	ror	r21
    16c6:	47 95       	ror	r20
    16c8:	9a 95       	dec	r25
    16ca:	d1 f7       	brne	.-12     	; 0x16c0 <_ZN8TimerOne9setPeriodEl+0x60>
    16cc:	41 15       	cp	r20, r1
    16ce:	51 05       	cpc	r21, r1
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	68 07       	cpc	r22, r24
    16d4:	71 05       	cpc	r23, r1
    16d6:	14 f4       	brge	.+4      	; 0x16dc <_ZN8TimerOne9setPeriodEl+0x7c>
    16d8:	84 e0       	ldi	r24, 0x04	; 4
    16da:	e0 cf       	rjmp	.-64     	; 0x169c <_ZN8TimerOne9setPeriodEl+0x3c>
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	75 95       	asr	r23
    16e0:	67 95       	ror	r22
    16e2:	57 95       	ror	r21
    16e4:	47 95       	ror	r20
    16e6:	8a 95       	dec	r24
    16e8:	d1 f7       	brne	.-12     	; 0x16de <_ZN8TimerOne9setPeriodEl+0x7e>
    16ea:	85 e0       	ldi	r24, 0x05	; 5
    16ec:	82 83       	std	Z+2, r24	; 0x02
    16ee:	41 15       	cp	r20, r1
    16f0:	51 05       	cpc	r21, r1
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	68 07       	cpc	r22, r24
    16f6:	71 05       	cpc	r23, r1
    16f8:	24 f0       	brlt	.+8      	; 0x1702 <_ZN8TimerOne9setPeriodEl+0xa2>
    16fa:	4f ef       	ldi	r20, 0xFF	; 255
    16fc:	5f ef       	ldi	r21, 0xFF	; 255
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	8f b7       	in	r24, 0x3f	; 63
    1704:	83 83       	std	Z+3, r24	; 0x03
    1706:	f8 94       	cli
    1708:	51 83       	std	Z+1, r21	; 0x01
    170a:	40 83       	st	Z, r20
    170c:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
    1710:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    1714:	83 81       	ldd	r24, Z+3	; 0x03
    1716:	8f bf       	out	0x3f, r24	; 63
    1718:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    171c:	88 7f       	andi	r24, 0xF8	; 248
    171e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1722:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	89 2b       	or	r24, r25
    172a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    172e:	08 95       	ret

00001730 <_ZN8TimerOne10initializeEl>:
    1730:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1734:	20 e1       	ldi	r18, 0x10	; 16
    1736:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    173a:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <_ZN8TimerOne9setPeriodEl>

0000173e <_ZN8TimerOne15detachInterruptEv>:
    173e:	ef e6       	ldi	r30, 0x6F	; 111
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8e 7f       	andi	r24, 0xFE	; 254
    1746:	80 83       	st	Z, r24
    1748:	08 95       	ret

0000174a <_ZN8TimerOne6resumeEv>:
    174a:	e1 e8       	ldi	r30, 0x81	; 129
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	20 81       	ld	r18, Z
    1750:	dc 01       	movw	r26, r24
    1752:	12 96       	adiw	r26, 0x02	; 2
    1754:	8c 91       	ld	r24, X
    1756:	82 2b       	or	r24, r18
    1758:	80 83       	st	Z, r24
    175a:	08 95       	ret

0000175c <_ZN8TimerOne15attachInterruptEPFvvEl>:
  if(pin == 1 || pin == 9)       TCCR1A &= ~_BV(COM1A1);   // clear the bit that enables pwm on PB1
  else if(pin == 2 || pin == 10) TCCR1A &= ~_BV(COM1B1);   // clear the bit that enables pwm on PB2
}

void TimerOne::attachInterrupt(void (*isr)(), long microseconds)
{
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	ec 01       	movw	r28, r24
    1766:	8b 01       	movw	r16, r22
    1768:	ba 01       	movw	r22, r20
    176a:	a9 01       	movw	r20, r18
  if(microseconds > 0) setPeriod(microseconds);
    176c:	14 16       	cp	r1, r20
    176e:	15 06       	cpc	r1, r21
    1770:	16 06       	cpc	r1, r22
    1772:	17 06       	cpc	r1, r23
    1774:	14 f4       	brge	.+4      	; 0x177a <_ZN8TimerOne15attachInterruptEPFvvEl+0x1e>
    1776:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN8TimerOne9setPeriodEl>
  isrCallback = isr;                                       // register the user's callback with the real ISR
    177a:	1d 83       	std	Y+5, r17	; 0x05
    177c:	0c 83       	std	Y+4, r16	; 0x04
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	// AR - remove sei() - might be running with interrupts disabled (eg inside an ISR), so leave unchanged
//  sei();                                                   // ensures that interrupts are globally enabled
  resume();
    1784:	ce 01       	movw	r24, r28
}
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
  if(microseconds > 0) setPeriod(microseconds);
  isrCallback = isr;                                       // register the user's callback with the real ISR
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
	// AR - remove sei() - might be running with interrupts disabled (eg inside an ISR), so leave unchanged
//  sei();                                                   // ensures that interrupts are globally enabled
  resume();
    178e:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <_ZN8TimerOne6resumeEv>

00001792 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    1792:	08 95       	ret

00001794 <attachInterrupt>:
    nothing,
#endif
};

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1794:	82 30       	cpi	r24, 0x02	; 2
    1796:	e8 f4       	brcc	.+58     	; 0x17d2 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    1798:	e8 2f       	mov	r30, r24
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	ee 0f       	add	r30, r30
    179e:	ff 1f       	adc	r31, r31
    17a0:	e0 50       	subi	r30, 0x00	; 0
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	71 83       	std	Z+1, r23	; 0x01
    17a6:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	41 f0       	breq	.+16     	; 0x17bc <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    17ac:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    17b0:	8c 7f       	andi	r24, 0xFC	; 252
    17b2:	48 2b       	or	r20, r24
    17b4:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT0);
    17b8:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    17ba:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    17bc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    17c0:	83 7f       	andi	r24, 0xF3	; 243
    17c2:	44 0f       	add	r20, r20
    17c4:	55 1f       	adc	r21, r21
    17c6:	44 0f       	add	r20, r20
    17c8:	55 1f       	adc	r21, r21
    17ca:	48 2b       	or	r20, r24
    17cc:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT1);
    17d0:	e9 9a       	sbi	0x1d, 1	; 29
    17d2:	08 95       	ret

000017d4 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    17d4:	82 30       	cpi	r24, 0x02	; 2
    17d6:	78 f4       	brcc	.+30     	; 0x17f6 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	11 f0       	breq	.+4      	; 0x17e0 <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    17dc:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    17e0:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    17e2:	e8 2f       	mov	r30, r24
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	ee 0f       	add	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	e0 50       	subi	r30, 0x00	; 0
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	89 ec       	ldi	r24, 0xC9	; 201
    17f0:	9b e0       	ldi	r25, 0x0B	; 11
    17f2:	91 83       	std	Z+1, r25	; 0x01
    17f4:	80 83       	st	Z, r24
    17f6:	08 95       	ret

000017f8 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    17f8:	1f 92       	push	r1
    17fa:	0f 92       	push	r0
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	0f 92       	push	r0
    1800:	11 24       	eor	r1, r1
    1802:	2f 93       	push	r18
    1804:	3f 93       	push	r19
    1806:	4f 93       	push	r20
    1808:	5f 93       	push	r21
    180a:	6f 93       	push	r22
    180c:	7f 93       	push	r23
    180e:	8f 93       	push	r24
    1810:	9f 93       	push	r25
    1812:	af 93       	push	r26
    1814:	bf 93       	push	r27
    1816:	ef 93       	push	r30
    1818:	ff 93       	push	r31
    181a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    181e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1822:	09 95       	icall
    1824:	ff 91       	pop	r31
    1826:	ef 91       	pop	r30
    1828:	bf 91       	pop	r27
    182a:	af 91       	pop	r26
    182c:	9f 91       	pop	r25
    182e:	8f 91       	pop	r24
    1830:	7f 91       	pop	r23
    1832:	6f 91       	pop	r22
    1834:	5f 91       	pop	r21
    1836:	4f 91       	pop	r20
    1838:	3f 91       	pop	r19
    183a:	2f 91       	pop	r18
    183c:	0f 90       	pop	r0
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	0f 90       	pop	r0
    1842:	1f 90       	pop	r1
    1844:	18 95       	reti

00001846 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1846:	1f 92       	push	r1
    1848:	0f 92       	push	r0
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	0f 92       	push	r0
    184e:	11 24       	eor	r1, r1
    1850:	2f 93       	push	r18
    1852:	3f 93       	push	r19
    1854:	4f 93       	push	r20
    1856:	5f 93       	push	r21
    1858:	6f 93       	push	r22
    185a:	7f 93       	push	r23
    185c:	8f 93       	push	r24
    185e:	9f 93       	push	r25
    1860:	af 93       	push	r26
    1862:	bf 93       	push	r27
    1864:	ef 93       	push	r30
    1866:	ff 93       	push	r31
    1868:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    186c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1870:	09 95       	icall
    1872:	ff 91       	pop	r31
    1874:	ef 91       	pop	r30
    1876:	bf 91       	pop	r27
    1878:	af 91       	pop	r26
    187a:	9f 91       	pop	r25
    187c:	8f 91       	pop	r24
    187e:	7f 91       	pop	r23
    1880:	6f 91       	pop	r22
    1882:	5f 91       	pop	r21
    1884:	4f 91       	pop	r20
    1886:	3f 91       	pop	r19
    1888:	2f 91       	pop	r18
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	0f 90       	pop	r0
    1890:	1f 90       	pop	r1
    1892:	18 95       	reti

00001894 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1894:	83 30       	cpi	r24, 0x03	; 3
    1896:	81 f0       	breq	.+32     	; 0x18b8 <turnOffPWM+0x24>
    1898:	28 f4       	brcc	.+10     	; 0x18a4 <turnOffPWM+0x10>
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	99 f0       	breq	.+38     	; 0x18c4 <turnOffPWM+0x30>
    189e:	82 30       	cpi	r24, 0x02	; 2
    18a0:	a1 f0       	breq	.+40     	; 0x18ca <turnOffPWM+0x36>
    18a2:	08 95       	ret
    18a4:	87 30       	cpi	r24, 0x07	; 7
    18a6:	a9 f0       	breq	.+42     	; 0x18d2 <turnOffPWM+0x3e>
    18a8:	88 30       	cpi	r24, 0x08	; 8
    18aa:	b9 f0       	breq	.+46     	; 0x18da <turnOffPWM+0x46>
    18ac:	84 30       	cpi	r24, 0x04	; 4
    18ae:	d1 f4       	brne	.+52     	; 0x18e4 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    18b0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    18b4:	8f 7d       	andi	r24, 0xDF	; 223
    18b6:	03 c0       	rjmp	.+6      	; 0x18be <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    18b8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    18bc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    18be:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    18c2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    18c4:	84 b5       	in	r24, 0x24	; 36
    18c6:	8f 77       	andi	r24, 0x7F	; 127
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    18ca:	84 b5       	in	r24, 0x24	; 36
    18cc:	8f 7d       	andi	r24, 0xDF	; 223
    18ce:	84 bd       	out	0x24, r24	; 36
    18d0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    18d2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    18d6:	8f 77       	andi	r24, 0x7F	; 127
    18d8:	03 c0       	rjmp	.+6      	; 0x18e0 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    18da:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    18de:	8f 7d       	andi	r24, 0xDF	; 223
    18e0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    18e4:	08 95       	ret

000018e6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	fc 01       	movw	r30, r24
    18ee:	e4 58       	subi	r30, 0x84	; 132
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    18f4:	fc 01       	movw	r30, r24
    18f6:	e0 57       	subi	r30, 0x70	; 112
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    18fc:	88 23       	and	r24, r24
    18fe:	61 f1       	breq	.+88     	; 0x1958 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	fc 01       	movw	r30, r24
    1908:	e2 55       	subi	r30, 0x52	; 82
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	c5 91       	lpm	r28, Z+
    190e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1910:	fc 01       	movw	r30, r24
    1912:	ec 55       	subi	r30, 0x5C	; 92
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	a5 91       	lpm	r26, Z+
    1918:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    191a:	61 11       	cpse	r22, r1
    191c:	09 c0       	rjmp	.+18     	; 0x1930 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    191e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1920:	f8 94       	cli
		*reg &= ~bit;
    1922:	88 81       	ld	r24, Y
    1924:	20 95       	com	r18
    1926:	82 23       	and	r24, r18
    1928:	88 83       	st	Y, r24
		*out &= ~bit;
    192a:	ec 91       	ld	r30, X
    192c:	2e 23       	and	r18, r30
    192e:	0b c0       	rjmp	.+22     	; 0x1946 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1930:	62 30       	cpi	r22, 0x02	; 2
    1932:	61 f4       	brne	.+24     	; 0x194c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1934:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1936:	f8 94       	cli
		*reg &= ~bit;
    1938:	88 81       	ld	r24, Y
    193a:	32 2f       	mov	r19, r18
    193c:	30 95       	com	r19
    193e:	83 23       	and	r24, r19
    1940:	88 83       	st	Y, r24
		*out |= bit;
    1942:	ec 91       	ld	r30, X
    1944:	2e 2b       	or	r18, r30
    1946:	2c 93       	st	X, r18
		SREG = oldSREG;
    1948:	9f bf       	out	0x3f, r25	; 63
    194a:	06 c0       	rjmp	.+12     	; 0x1958 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    194c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    194e:	f8 94       	cli
		*reg |= bit;
    1950:	e8 81       	ld	r30, Y
    1952:	2e 2b       	or	r18, r30
    1954:	28 83       	st	Y, r18
		SREG = oldSREG;
    1956:	8f bf       	out	0x3f, r24	; 63
	}
}
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	08 95       	ret

0000195e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	f9 01       	movw	r30, r18
    196a:	e8 59       	subi	r30, 0x98	; 152
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1970:	f9 01       	movw	r30, r18
    1972:	e4 58       	subi	r30, 0x84	; 132
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1978:	f9 01       	movw	r30, r18
    197a:	e0 57       	subi	r30, 0x70	; 112
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1980:	cc 23       	and	r28, r28
    1982:	c1 f0       	breq	.+48     	; 0x19b4 <digitalWrite+0x56>
    1984:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1986:	81 11       	cpse	r24, r1
    1988:	0e 94 4a 0c 	call	0x1894	; 0x1894 <turnOffPWM>

	out = portOutputRegister(port);
    198c:	ec 2f       	mov	r30, r28
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	ee 0f       	add	r30, r30
    1992:	ff 1f       	adc	r31, r31
    1994:	ec 55       	subi	r30, 0x5C	; 92
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	a5 91       	lpm	r26, Z+
    199a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    199c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    199e:	f8 94       	cli

	if (val == LOW) {
    19a0:	11 11       	cpse	r17, r1
    19a2:	04 c0       	rjmp	.+8      	; 0x19ac <digitalWrite+0x4e>
		*out &= ~bit;
    19a4:	8c 91       	ld	r24, X
    19a6:	d0 95       	com	r29
    19a8:	d8 23       	and	r29, r24
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <digitalWrite+0x52>
	} else {
		*out |= bit;
    19ac:	ec 91       	ld	r30, X
    19ae:	de 2b       	or	r29, r30
    19b0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    19b2:	9f bf       	out	0x3f, r25	; 63
}
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	08 95       	ret

000019bc <__vector_6>:
  MCUSR &= ~(1<<WDRF);
  // start timed sequence
  WDTCSR |= (1<<WDCE) | (1<<WDE);
  // set new watchdog timeout value
  WDTCSR = bb;
  WDTCSR |= _BV(WDIE);    // Enable Watchdog interrupt
    19bc:	1f 92       	push	r1
    19be:	0f 92       	push	r0
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	0f 92       	push	r0
    19c4:	11 24       	eor	r1, r1
    19c6:	0f 90       	pop	r0
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	0f 90       	pop	r0
    19cc:	1f 90       	pop	r1
    19ce:	18 95       	reti

000019d0 <__vector_9>:

/**
 * Timer 2 (RTC) ISR routine
 */
ISR(TIMER2_OVF_vect)
{
    19d0:	1f 92       	push	r1
    19d2:	0f 92       	push	r0
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	0f 92       	push	r0
    19d8:	11 24       	eor	r1, r1
    19da:	8f 93       	push	r24
    19dc:	9f 93       	push	r25
    19de:	af 93       	push	r26
    19e0:	bf 93       	push	r27
  AVRRTC::count++;    // Increment counter
    19e2:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZN6AVRRTC5countE>
    19e6:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <_ZN6AVRRTC5countE+0x1>
    19ea:	a0 91 10 03 	lds	r26, 0x0310	; 0x800310 <_ZN6AVRRTC5countE+0x2>
    19ee:	b0 91 11 03 	lds	r27, 0x0311	; 0x800311 <_ZN6AVRRTC5countE+0x3>
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	a1 1d       	adc	r26, r1
    19f6:	b1 1d       	adc	r27, r1
    19f8:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <_ZN6AVRRTC5countE>
    19fc:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <_ZN6AVRRTC5countE+0x1>
    1a00:	a0 93 10 03 	sts	0x0310, r26	; 0x800310 <_ZN6AVRRTC5countE+0x2>
    1a04:	b0 93 11 03 	sts	0x0311, r27	; 0x800311 <_ZN6AVRRTC5countE+0x3>
}
    1a08:	bf 91       	pop	r27
    1a0a:	af 91       	pop	r26
    1a0c:	9f 91       	pop	r25
    1a0e:	8f 91       	pop	r24
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	0f 90       	pop	r0
    1a16:	1f 90       	pop	r1
    1a18:	18 95       	reti

00001a1a <_Z14rcOscCalibratev>:
 * Return:
 *   true  : calibration successfully done
 *   false : unable to complete calibration
 */
bool rcOscCalibrate(void)
{
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
  uint8_t loopCount = (0x7F / 2);
  uint32_t checkCount = 100;

  // Save current OSCCAL value
  uint8_t oldOsccal = OSCCAL;
    1a1e:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

  // Save Timer 1 settings
  uint8_t oldTCCR1A = TCCR1A;
    1a22:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  uint8_t oldTCCR1B = TCCR1B;
    1a26:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  // Save Timer 2 settings
  uint8_t oldTCCR2A = TCCR2A;
    1a2a:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  
  // Inital OSCCAL of half its maximum
  OSCCAL = (0x7F / 2);
    1a2e:	8f e3       	ldi	r24, 0x3F	; 63
    1a30:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

  // Disable timer interrupts
  TIMSK1 = 0;
    1a34:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  TIMSK2 = 0;
    1a38:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>

  // Set timer 2 to asyncronous mode (32.768KHz crystal)
  ASSR = (1 << AS2);
    1a3c:	80 e2       	ldi	r24, 0x20	; 32
    1a3e:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>

  // Ensure timer 1 control register A is cleared
  TCCR1A = 0;
    1a42:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>

  // Timer 2 normal operation
  TCCR2A = 0x00;
    1a46:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>

  // Start Timer 2 with no prescaling
  TCCR2B = (1 << CS20);
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

  // Start Timer 1 with no prescaling
  TCCR1B = (1 << CS10);
    1a50:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  TIFR1 |= (1 << TOV1);          // Clear timer 1 overflow flag   
    1a54:	b0 9a       	sbi	0x16, 0	; 22
  TCNT1 = 0;                     // Reset Timer 1 count
    1a56:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1a5a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1a5e:	90 e4       	ldi	r25, 0x40	; 64
 *   false : unable to complete calibration
 */
bool rcOscCalibrate(void)
{
  uint8_t loopCount = (0x7F / 2);
  uint32_t checkCount = 100;
    1a60:	44 e6       	ldi	r20, 0x64	; 100
    1a62:	50 e0       	ldi	r21, 0x00	; 0
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	70 e0       	ldi	r23, 0x00	; 0
          return false;              // 32.768 KHz crystal is not present
        }
      }
    }

    TCCR1B = (1 << CS10);          // Start Timer 1 with no prescaling
    1a68:	a1 e0       	ldi	r26, 0x01	; 1
    1a6a:	91 50       	subi	r25, 0x01	; 1
  TCCR1B = (1 << CS10);
  TIFR1 |= (1 << TOV1);          // Clear timer 1 overflow flag   
  TCNT1 = 0;                     // Reset Timer 1 count

  // Enter calibration loop
  while (loopCount--)
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <_Z14rcOscCalibratev+0x56>
    1a6e:	3b c0       	rjmp	.+118    	; 0x1ae6 <_Z14rcOscCalibratev+0xcc>
  {  
    TIFR2 |= (1 << TOV2);          // Clear timer 2 overflow flag   
    1a70:	b8 9a       	sbi	0x17, 0	; 23
    TCNT2 = 0;                     // Reset Timer 2 count
    1a72:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    
    // Wait for the registers to be updated for Timer 2
    while (ASSR & (_BV(TCN2UB) | _BV(TCR2AUB) | _BV(TCR2BUB)))
    1a76:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
    1a7a:	83 71       	andi	r24, 0x13	; 19
    1a7c:	91 f0       	breq	.+36     	; 0x1aa2 <_Z14rcOscCalibratev+0x88>
    {
      // Use timer 1 to detect presence or lack of external crystal
      if (TIFR1 & (1 << TOV1))
    1a7e:	b0 9b       	sbis	0x16, 0	; 22
    1a80:	fa cf       	rjmp	.-12     	; 0x1a76 <_Z14rcOscCalibratev+0x5c>
      {
        TIFR1 |= (1 << TOV1);        // Clear timer 1 overflow flag   
    1a82:	b0 9a       	sbi	0x16, 0	; 22
        TCNT1 = 0;                   // Reset Timer 1 count
    1a84:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1a88:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
        if (--checkCount == 0)
    1a8c:	41 50       	subi	r20, 0x01	; 1
    1a8e:	51 09       	sbc	r21, r1
    1a90:	61 09       	sbc	r22, r1
    1a92:	71 09       	sbc	r23, r1
    1a94:	81 f7       	brne	.-32     	; 0x1a76 <_Z14rcOscCalibratev+0x5c>
        {
          ASSR = 0;                  // Disable Timer 2
    1a96:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
          OSCCAL = oldOsccal;        // Set factory default OSCCAL
    1a9a:	f0 93 66 00 	sts	0x0066, r31	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>
          return false;              // 32.768 KHz crystal is not present
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	2e c0       	rjmp	.+92     	; 0x1afe <_Z14rcOscCalibratev+0xe4>
        }
      }
    }

    TCCR1B = (1 << CS10);          // Start Timer 1 with no prescaling
    1aa2:	a0 93 81 00 	sts	0x0081, r26	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    TCNT1 = 0;                     // Reset Timer 1 count
    1aa6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1aaa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    
    // Wait until timer 2 overflows
    while (!(TIFR2 & (1 << TOV2)));
    1aae:	b8 9b       	sbis	0x17, 0	; 23
    1ab0:	fe cf       	rjmp	.-4      	; 0x1aae <_Z14rcOscCalibratev+0x94>

    // Stop timer 1 so it can be read
    TCCR1B = 0x00;
    1ab2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

    // Check timer value against ideal constant
    if (TCNT1 > TARGETCOUNT_MAX)       // Clock is running too fast
    1ab6:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1aba:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1abe:	c7 35       	cpi	r28, 0x57	; 87
    1ac0:	d4 4f       	sbci	r29, 0xF4	; 244
    1ac2:	20 f0       	brcs	.+8      	; 0x1acc <_Z14rcOscCalibratev+0xb2>
      OSCCAL--;
    1ac4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>
    1ac8:	81 50       	subi	r24, 0x01	; 1
    1aca:	0a c0       	rjmp	.+20     	; 0x1ae0 <_Z14rcOscCalibratev+0xc6>
    else if (TCNT1 < TARGETCOUNT_MIN)  // Clock is running too slow
    1acc:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1ad0:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1ad4:	c2 3f       	cpi	r28, 0xF2	; 242
    1ad6:	d3 4f       	sbci	r29, 0xF3	; 243
    1ad8:	30 f4       	brcc	.+12     	; 0x1ae6 <_Z14rcOscCalibratev+0xcc>
      OSCCAL++;
    1ada:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>
    1ade:	8f 5f       	subi	r24, 0xFF	; 255
    1ae0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>
    1ae4:	c2 cf       	rjmp	.-124    	; 0x1a6a <_Z14rcOscCalibratev+0x50>
    else                               // Clock is OK
      break;
  }

  ASSR = 0;                        // Disable Timer 2
    1ae6:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
  TIFR2 |= (1 << TOV2);            // Clear timer 2 overflow flag   
    1aea:	b8 9a       	sbi	0x17, 0	; 23
  TCNT2 = 0;                       // Reset Timer 2 count
    1aec:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

  // Revert to original Timer 1 settings
  TCCR1A = oldTCCR1A;
    1af0:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B = oldTCCR1B;
    1af4:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  
  // Revert to original Timer 2 settings
  TCCR2A = oldTCCR2A;
    1af8:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    // Store OSCCAL in the last location in EEPROM
    EEPROM.write(0x3FF, OSCCAL);
  }
  */

  return true;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
}
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	08 95       	ret

00001b04 <__udivmodsi4>:
    1b04:	a1 e2       	ldi	r26, 0x21	; 33
    1b06:	1a 2e       	mov	r1, r26
    1b08:	aa 1b       	sub	r26, r26
    1b0a:	bb 1b       	sub	r27, r27
    1b0c:	fd 01       	movw	r30, r26
    1b0e:	0d c0       	rjmp	.+26     	; 0x1b2a <__udivmodsi4_ep>

00001b10 <__udivmodsi4_loop>:
    1b10:	aa 1f       	adc	r26, r26
    1b12:	bb 1f       	adc	r27, r27
    1b14:	ee 1f       	adc	r30, r30
    1b16:	ff 1f       	adc	r31, r31
    1b18:	a2 17       	cp	r26, r18
    1b1a:	b3 07       	cpc	r27, r19
    1b1c:	e4 07       	cpc	r30, r20
    1b1e:	f5 07       	cpc	r31, r21
    1b20:	20 f0       	brcs	.+8      	; 0x1b2a <__udivmodsi4_ep>
    1b22:	a2 1b       	sub	r26, r18
    1b24:	b3 0b       	sbc	r27, r19
    1b26:	e4 0b       	sbc	r30, r20
    1b28:	f5 0b       	sbc	r31, r21

00001b2a <__udivmodsi4_ep>:
    1b2a:	66 1f       	adc	r22, r22
    1b2c:	77 1f       	adc	r23, r23
    1b2e:	88 1f       	adc	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	1a 94       	dec	r1
    1b34:	69 f7       	brne	.-38     	; 0x1b10 <__udivmodsi4_loop>
    1b36:	60 95       	com	r22
    1b38:	70 95       	com	r23
    1b3a:	80 95       	com	r24
    1b3c:	90 95       	com	r25
    1b3e:	9b 01       	movw	r18, r22
    1b40:	ac 01       	movw	r20, r24
    1b42:	bd 01       	movw	r22, r26
    1b44:	cf 01       	movw	r24, r30
    1b46:	08 95       	ret

00001b48 <__tablejump2__>:
    1b48:	ee 0f       	add	r30, r30
    1b4a:	ff 1f       	adc	r31, r31
    1b4c:	05 90       	lpm	r0, Z+
    1b4e:	f4 91       	lpm	r31, Z
    1b50:	e0 2d       	mov	r30, r0
    1b52:	09 94       	ijmp

00001b54 <strcmp>:
    1b54:	fb 01       	movw	r30, r22
    1b56:	dc 01       	movw	r26, r24
    1b58:	8d 91       	ld	r24, X+
    1b5a:	01 90       	ld	r0, Z+
    1b5c:	80 19       	sub	r24, r0
    1b5e:	01 10       	cpse	r0, r1
    1b60:	d9 f3       	breq	.-10     	; 0x1b58 <strcmp+0x4>
    1b62:	99 0b       	sbc	r25, r25
    1b64:	08 95       	ret

00001b66 <strncmp>:
    1b66:	fb 01       	movw	r30, r22
    1b68:	dc 01       	movw	r26, r24
    1b6a:	41 50       	subi	r20, 0x01	; 1
    1b6c:	50 40       	sbci	r21, 0x00	; 0
    1b6e:	30 f0       	brcs	.+12     	; 0x1b7c <strncmp+0x16>
    1b70:	8d 91       	ld	r24, X+
    1b72:	01 90       	ld	r0, Z+
    1b74:	80 19       	sub	r24, r0
    1b76:	19 f4       	brne	.+6      	; 0x1b7e <strncmp+0x18>
    1b78:	00 20       	and	r0, r0
    1b7a:	b9 f7       	brne	.-18     	; 0x1b6a <strncmp+0x4>
    1b7c:	88 1b       	sub	r24, r24
    1b7e:	99 0b       	sbc	r25, r25
    1b80:	08 95       	ret

00001b82 <_exit>:
    1b82:	f8 94       	cli

00001b84 <__stop_program>:
    1b84:	ff cf       	rjmp	.-2      	; 0x1b84 <__stop_program>
